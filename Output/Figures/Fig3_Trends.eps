%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Fig3_Trends.pdf
%%Creator: Adobe Acrobat 17.11.0
%%For: ac135138
%%CreationDate: 11.10.2021, 19:30:51
%%BoundingBox: 0 0 792 612
%%HiResBoundingBox: 0 0 792 612
%%CropBox: 0 0 792 612
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 521 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c017 91.164464, 2020/06/15-10:20:05        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2021-10-11T19:06:26+02:00"
   pdf:Producer="cairo 1.16.0 (https://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -612 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 612 li
792 612 li
792 0 li
cp
clp
0 0 mo
792 0 li
792 612 li
0 612 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
0 0 mo
792 0 li
792 306 li
0 306 li
cp
f
gsave
0 0 mo
792 0 li
792 306 li
0 306 li
cp
clp
1.06698 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
0 0 mo
792 0 li
792 306 li
0 306 li
cp
@
grestore
49.098 17.926 mo
777.828 17.926 li
777.828 223.926 li
49.098 223.926 li
cp
f
gsave
49.098 216 mo
777.828 216 li
777.828 217 li
49.098 217 li
cp
clp
.533489 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
49.098 216.699 mo
777.828 216.699 li
.0627451 .0476081 .0476081 0 cmyk
@
grestore
gsave
49.098 174 mo
777.828 174 li
777.828 175 li
49.098 175 li
cp
clp
.533489 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
49.098 174.547 mo
777.828 174.547 li
.0627451 .0476081 .0476081 0 cmyk
@
grestore
gsave
49.098 132 mo
777.828 132 li
777.828 133 li
49.098 133 li
cp
clp
.533489 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
49.098 132.391 mo
777.828 132.391 li
.0627451 .0476081 .0476081 0 cmyk
@
grestore
gsave
49.098 89 mo
777.828 89 li
777.828 91 li
49.098 91 li
cp
clp
.533489 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
49.098 90.234 mo
777.828 90.234 li
.0627451 .0476081 .0476081 0 cmyk
@
grestore
gsave
49.098 47 mo
777.828 47 li
777.828 49 li
49.098 49 li
cp
clp
.533489 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
49.098 48.078 mo
777.828 48.078 li
.0627451 .0476081 .0476081 0 cmyk
@
grestore
gsave
176 17.93 mo
178 17.93 li
178 223.93 li
176 223.93 li
cp
clp
.533489 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
176.859 223.926 mo
176.859 17.93 li
.0627451 .0476081 .0476081 0 cmyk
@
grestore
gsave
365 17.93 mo
367 17.93 li
367 223.93 li
365 223.93 li
cp
clp
.533489 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
366.141 223.926 mo
366.141 17.93 li
.0627451 .0476081 .0476081 0 cmyk
@
grestore
gsave
555 17.93 mo
556 17.93 li
556 223.93 li
555 223.93 li
cp
clp
.533489 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
555.422 223.926 mo
555.422 17.93 li
.0627451 .0476081 .0476081 0 cmyk
@
grestore
gsave
744 17.93 mo
745 17.93 li
745 223.93 li
744 223.93 li
cp
clp
.533489 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
744.703 223.926 mo
744.703 17.93 li
.0627451 .0476081 .0476081 0 cmyk
@
grestore
gsave
49.098 195 mo
777.828 195 li
777.828 197 li
49.098 197 li
cp
clp
1.06698 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
49.098 195.621 mo
777.828 195.621 li
.0627451 .0476081 .0476081 0 cmyk
@
grestore
gsave
49.098 152 mo
777.828 152 li
777.828 155 li
49.098 155 li
cp
clp
1.06698 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
49.098 153.469 mo
777.828 153.469 li
.0627451 .0476081 .0476081 0 cmyk
@
grestore
gsave
49.098 110 mo
777.828 110 li
777.828 112 li
49.098 112 li
cp
clp
1.06698 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
49.098 111.313 mo
777.828 111.313 li
.0627451 .0476081 .0476081 0 cmyk
@
grestore
gsave
49.098 68 mo
777.828 68 li
777.828 70 li
49.098 70 li
cp
clp
1.06698 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
49.098 69.156 mo
777.828 69.156 li
.0627451 .0476081 .0476081 0 cmyk
@
grestore
gsave
49.098 26 mo
777.828 26 li
777.828 28 li
49.098 28 li
cp
clp
1.06698 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
49.098 27 mo
777.828 27 li
.0627451 .0476081 .0476081 0 cmyk
@
grestore
gsave
81 17.93 mo
83 17.93 li
83 223.93 li
81 223.93 li
cp
clp
1.06698 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
82.219 223.926 mo
82.219 17.93 li
.0627451 .0476081 .0476081 0 cmyk
@
grestore
gsave
270 17.93 mo
273 17.93 li
273 223.93 li
270 223.93 li
cp
clp
1.06698 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
271.5 223.926 mo
271.5 17.93 li
.0627451 .0476081 .0476081 0 cmyk
@
grestore
gsave
460 17.93 mo
462 17.93 li
462 223.93 li
460 223.93 li
cp
clp
1.06698 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
460.781 223.926 mo
460.781 17.93 li
.0627451 .0476081 .0476081 0 cmyk
@
grestore
gsave
649 17.93 mo
651 17.93 li
651 223.93 li
649 223.93 li
cp
clp
1.06698 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
650.063 223.926 mo
650.063 17.93 li
.0627451 .0476081 .0476081 0 cmyk
@
grestore
1.06698 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
82.219 214.488 mo
88.922 210.754 li
95.602 207.598 li
102.301 204.977 li
108.984 202.84 li
115.684 201.141 li
122.367 199.828 li
129.066 198.859 li
135.75 198.18 li
142.449 197.75 li
149.129 197.512 li
155.832 197.422 li
162.512 197.434 li
169.215 197.5 li
175.895 197.566 li
182.594 197.59 li
189.297 197.52 li
195.977 197.313 li
202.68 196.91 li
209.359 196.277 li
216.059 195.355 li
222.742 194.102 li
229.441 192.469 li
236.125 190.406 li
242.824 187.906 li
249.508 185.027 li
256.207 181.82 li
262.887 178.34 li
269.59 174.645 li
276.289 170.793 li
282.973 166.836 li
289.672 162.832 li
296.352 158.84 li
303.055 154.906 li
309.734 151.098 li
316.438 147.465 li
323.117 144.063 li
329.816 140.949 li
336.5 138.148 li
343.199 135.609 li
349.883 133.281 li
356.582 131.109 li
363.266 129.043 li
369.965 127.02 li
376.664 124.992 li
383.348 122.906 li
390.047 120.703 li
396.73 118.367 li
403.43 115.887 li
410.109 113.254 li
416.813 110.457 li
423.492 107.484 li
430.195 104.332 li
436.875 100.988 li
443.574 97.445 li
450.258 93.715 li
456.957 89.875 li
463.66 85.992 li
470.34 82.141 li
477.039 78.398 li
483.723 74.836 li
490.422 71.531 li
497.105 68.551 li
503.805 65.973 li
510.488 63.871 li
517.188 62.316 li
523.867 61.363 li
530.57 60.949 li
537.25 60.98 li
543.953 61.367 li
550.633 62.012 li
557.332 62.82 li
564.035 63.699 li
570.715 64.559 li
577.418 65.301 li
584.098 65.832 li
590.797 66.066 li
597.48 65.906 li
604.18 65.363 li
610.863 64.496 li
617.563 63.371 li
624.246 62.059 li
630.945 60.629 li
637.625 59.141 li
644.328 57.66 li
651.027 56.262 li
657.711 55.008 li
664.41 53.965 li
671.09 53.203 li
677.793 52.695 li
684.473 52.305 li
691.176 51.867 li
697.855 51.215 li
704.555 50.199 li
711.238 48.648 li
717.938 46.402 li
724.621 43.309 li
731.32 39.199 li
738.004 33.914 li
744.703 27.293 li
.273228 1 .618616 .191989 cmyk
@
82.219 214.563 mo
88.922 213.094 li
95.602 211.688 li
102.301 210.344 li
108.984 209.066 li
115.684 207.848 li
122.367 206.688 li
129.066 205.582 li
135.75 204.531 li
142.449 203.531 li
149.129 202.578 li
155.832 201.676 li
162.512 200.816 li
169.215 200 li
175.895 199.227 li
182.594 198.488 li
189.297 197.789 li
195.977 197.121 li
202.68 196.484 li
209.359 195.883 li
216.059 195.305 li
222.742 194.754 li
229.441 194.223 li
236.125 193.719 li
242.824 193.227 li
249.508 192.742 li
256.207 192.262 li
262.887 191.77 li
269.59 191.262 li
276.289 190.73 li
282.973 190.168 li
289.672 189.559 li
296.352 188.902 li
303.055 188.188 li
309.734 187.406 li
316.438 186.551 li
323.117 185.613 li
329.816 184.582 li
336.5 183.473 li
343.199 182.316 li
349.883 181.168 li
356.582 180.066 li
363.266 179.063 li
369.965 178.203 li
376.664 177.531 li
383.348 177.09 li
390.047 176.926 li
396.73 177.004 li
403.43 177.262 li
410.109 177.637 li
416.813 178.066 li
423.492 178.484 li
430.195 178.828 li
436.875 179.035 li
443.574 179.043 li
450.258 178.816 li
456.957 178.387 li
463.66 177.789 li
470.34 177.059 li
477.039 176.23 li
483.723 175.344 li
490.422 174.43 li
497.105 173.531 li
503.805 172.676 li
510.488 171.902 li
517.188 171.246 li
523.867 170.738 li
530.57 170.359 li
537.25 170.098 li
543.953 169.926 li
550.633 169.82 li
557.332 169.762 li
564.035 169.727 li
570.715 169.695 li
577.418 169.641 li
584.098 169.543 li
590.797 169.383 li
597.48 169.133 li
604.18 168.809 li
610.863 168.426 li
617.563 168.016 li
624.246 167.602 li
630.945 167.211 li
637.625 166.863 li
644.328 166.59 li
651.027 166.41 li
657.711 166.355 li
664.41 166.449 li
671.09 166.711 li
677.793 167.141 li
684.473 167.668 li
691.176 168.227 li
697.855 168.746 li
704.555 169.156 li
711.238 169.395 li
717.938 169.387 li
724.621 169.063 li
731.32 168.359 li
738.004 167.203 li
744.703 165.527 li
.108858 .909636 .654292 .0150454 cmyk
@
82.219 212.77 mo
88.922 211.887 li
95.602 211.063 li
102.301 210.289 li
108.984 209.57 li
115.684 208.906 li
122.367 208.297 li
129.066 207.738 li
135.75 207.234 li
142.449 206.781 li
149.129 206.383 li
155.832 206.035 li
162.512 205.742 li
169.215 205.5 li
175.895 205.309 li
182.594 205.168 li
189.297 205.082 li
195.977 205.047 li
202.68 205.059 li
209.359 205.125 li
216.059 205.242 li
222.742 205.41 li
229.441 205.629 li
236.125 205.895 li
242.824 206.207 li
249.508 206.555 li
256.207 206.918 li
262.887 207.285 li
269.59 207.645 li
276.289 207.984 li
282.973 208.289 li
289.672 208.547 li
296.352 208.742 li
303.055 208.867 li
309.734 208.902 li
316.438 208.836 li
323.117 208.656 li
329.816 208.348 li
336.5 207.918 li
343.199 207.398 li
349.883 206.832 li
356.582 206.254 li
363.266 205.707 li
369.965 205.234 li
376.664 204.871 li
383.348 204.66 li
390.047 204.629 li
396.73 204.758 li
403.43 204.984 li
410.109 205.254 li
416.813 205.504 li
423.492 205.676 li
430.195 205.715 li
436.875 205.559 li
443.574 205.148 li
450.258 204.465 li
456.957 203.539 li
463.66 202.418 li
470.34 201.148 li
477.039 199.77 li
483.723 198.328 li
490.422 196.871 li
497.105 195.441 li
503.805 194.082 li
510.488 192.84 li
517.188 191.758 li
523.867 190.867 li
530.57 190.148 li
537.25 189.563 li
543.953 189.07 li
550.633 188.629 li
557.332 188.207 li
564.035 187.762 li
570.715 187.254 li
577.418 186.645 li
584.098 185.895 li
590.797 184.969 li
597.48 183.824 li
604.18 182.477 li
610.863 180.949 li
617.563 179.289 li
624.246 177.523 li
630.945 175.695 li
637.625 173.832 li
644.328 171.977 li
651.027 170.16 li
657.711 168.422 li
664.41 166.793 li
671.09 165.316 li
677.793 164.016 li
684.473 162.922 li
691.176 162.055 li
697.855 161.445 li
704.555 161.109 li
711.238 161.078 li
717.938 161.379 li
724.621 162.027 li
731.32 163.055 li
738.004 164.48 li
744.703 166.336 li
.194034 .858488 0 0 cmyk
@
82.219 188.586 mo
88.922 186.797 li
95.602 185.211 li
102.301 183.816 li
108.984 182.613 li
115.684 181.59 li
122.367 180.734 li
129.066 180.043 li
135.75 179.5 li
142.449 179.105 li
149.129 178.844 li
155.832 178.711 li
162.512 178.699 li
169.215 178.793 li
175.895 178.992 li
182.594 179.281 li
189.297 179.652 li
195.977 180.102 li
202.68 180.621 li
209.359 181.195 li
216.059 181.82 li
222.742 182.484 li
229.441 183.184 li
236.125 183.906 li
242.824 184.641 li
249.508 185.375 li
256.207 186.094 li
262.887 186.777 li
269.59 187.422 li
276.289 188.004 li
282.973 188.516 li
289.672 188.934 li
296.352 189.25 li
303.055 189.453 li
309.734 189.52 li
316.438 189.441 li
323.117 189.199 li
329.816 188.785 li
336.5 188.199 li
343.199 187.496 li
349.883 186.734 li
356.582 185.969 li
363.266 185.254 li
369.965 184.652 li
376.664 184.215 li
383.348 183.996 li
390.047 184.055 li
396.73 184.344 li
403.43 184.789 li
410.109 185.316 li
416.813 185.84 li
423.492 186.285 li
430.195 186.57 li
436.875 186.621 li
443.574 186.355 li
450.258 185.75 li
456.957 184.871 li
463.66 183.801 li
470.34 182.629 li
477.039 181.426 li
483.723 180.281 li
490.422 179.273 li
497.105 178.484 li
503.805 178 li
510.488 177.895 li
517.188 178.258 li
523.867 179.133 li
530.57 180.406 li
537.25 181.914 li
543.953 183.496 li
550.633 184.992 li
557.332 186.234 li
564.035 187.063 li
570.715 187.313 li
577.418 186.824 li
584.098 185.438 li
590.797 182.984 li
597.48 179.32 li
604.18 174.477 li
610.863 168.609 li
617.563 161.891 li
624.246 154.477 li
630.945 146.531 li
637.625 138.227 li
644.328 129.715 li
651.027 121.168 li
657.711 112.746 li
664.41 104.613 li
671.09 96.938 li
677.793 89.93 li
684.473 83.891 li
691.176 79.125 li
697.855 75.945 li
704.555 74.656 li
711.238 75.563 li
717.938 78.973 li
724.621 85.195 li
731.32 94.531 li
738.004 107.297 li
744.703 123.793 li
0 .369329 .695216 0 cmyk
@
82.219 186.293 mo
88.922 184.633 li
95.602 183.027 li
102.301 181.473 li
108.984 179.965 li
115.684 178.5 li
122.367 177.07 li
129.066 175.668 li
135.75 174.293 li
142.449 172.938 li
149.129 171.594 li
155.832 170.262 li
162.512 168.93 li
169.215 167.598 li
175.895 166.254 li
182.594 164.902 li
189.297 163.527 li
195.977 162.133 li
202.68 160.707 li
209.359 159.246 li
216.059 157.746 li
222.742 156.199 li
229.441 154.602 li
236.125 152.949 li
242.824 151.238 li
249.508 149.469 li
256.207 147.648 li
262.887 145.773 li
269.59 143.852 li
276.289 141.883 li
282.973 139.867 li
289.672 137.813 li
296.352 135.719 li
303.055 133.59 li
309.734 131.422 li
316.438 129.227 li
323.117 127 li
329.816 124.746 li
336.5 122.477 li
343.199 120.23 li
349.883 118.043 li
356.582 115.949 li
363.266 113.992 li
369.965 112.203 li
376.664 110.625 li
383.348 109.293 li
390.047 108.238 li
396.73 107.441 li
403.43 106.859 li
410.109 106.453 li
416.813 106.172 li
423.492 105.969 li
430.195 105.809 li
436.875 105.637 li
443.574 105.414 li
450.258 105.117 li
456.957 104.762 li
463.66 104.359 li
470.34 103.934 li
477.039 103.504 li
483.723 103.082 li
490.422 102.695 li
497.105 102.355 li
503.805 102.082 li
510.488 101.898 li
517.188 101.816 li
523.867 101.852 li
530.57 101.977 li
537.25 102.164 li
543.953 102.375 li
550.633 102.574 li
557.332 102.734 li
564.035 102.82 li
570.715 102.797 li
577.418 102.629 li
584.098 102.285 li
590.797 101.73 li
597.48 100.934 li
604.18 99.902 li
610.863 98.668 li
617.563 97.254 li
624.246 95.699 li
630.945 94.035 li
637.625 92.289 li
644.328 90.492 li
651.027 88.676 li
657.711 86.871 li
664.41 85.113 li
671.09 83.43 li
677.793 81.836 li
684.473 80.313 li
691.176 78.848 li
697.855 77.422 li
704.555 76.02 li
711.238 74.621 li
717.938 73.215 li
724.621 71.777 li
731.32 70.293 li
738.004 68.746 li
744.703 67.121 li
1 .829374 .351232 .255924 cmyk
@
82.219 175.281 mo
88.922 172.656 li
95.602 170.523 li
102.301 168.859 li
108.984 167.621 li
115.684 166.781 li
122.367 166.305 li
129.066 166.156 li
135.75 166.305 li
142.449 166.711 li
149.129 167.344 li
155.832 168.176 li
162.512 169.16 li
169.215 170.273 li
175.895 171.48 li
182.594 172.746 li
189.297 174.031 li
195.977 175.313 li
202.68 176.547 li
209.359 177.703 li
216.059 178.75 li
222.742 179.652 li
229.441 180.375 li
236.125 180.887 li
242.824 181.18 li
249.508 181.273 li
256.207 181.207 li
262.887 181.008 li
269.59 180.703 li
276.289 180.32 li
282.973 179.891 li
289.672 179.445 li
296.352 179.012 li
303.055 178.621 li
309.734 178.305 li
316.438 178.086 li
323.117 177.996 li
329.816 178.066 li
336.5 178.301 li
343.199 178.656 li
349.883 179.074 li
356.582 179.504 li
363.266 179.898 li
369.965 180.199 li
376.664 180.359 li
383.348 180.32 li
390.047 180.039 li
396.73 179.531 li
403.43 178.848 li
410.109 178.035 li
416.813 177.145 li
423.492 176.219 li
430.195 175.313 li
436.875 174.473 li
443.574 173.746 li
450.258 173.152 li
456.957 172.676 li
463.66 172.281 li
470.34 171.938 li
477.039 171.621 li
483.723 171.293 li
490.422 170.93 li
497.105 170.5 li
503.805 169.973 li
510.488 169.32 li
517.188 168.508 li
523.867 167.52 li
530.57 166.379 li
537.25 165.113 li
543.953 163.77 li
550.633 162.375 li
557.332 160.969 li
564.035 159.586 li
570.715 158.262 li
577.418 157.031 li
584.098 155.934 li
590.797 154.996 li
597.48 154.262 li
604.18 153.703 li
610.863 153.27 li
617.563 152.91 li
624.246 152.57 li
630.945 152.195 li
637.625 151.73 li
644.328 151.121 li
651.027 150.313 li
657.711 149.254 li
664.41 147.891 li
671.09 146.172 li
677.793 144.109 li
684.473 141.84 li
691.176 139.504 li
697.855 137.246 li
704.555 135.211 li
711.238 133.539 li
717.938 132.375 li
724.621 131.863 li
731.32 132.145 li
738.004 133.363 li
744.703 135.664 li
.250797 .411353 1 .0362249 cmyk
@
82.219 178.25 mo
88.922 177.121 li
95.602 176.008 li
102.301 174.906 li
108.984 173.82 li
115.684 172.75 li
122.367 171.691 li
129.066 170.648 li
135.75 169.621 li
142.449 168.605 li
149.129 167.609 li
155.832 166.625 li
162.512 165.66 li
169.215 164.707 li
175.895 163.773 li
182.594 162.855 li
189.297 161.953 li
195.977 161.07 li
202.68 160.203 li
209.359 159.352 li
216.059 158.52 li
222.742 157.707 li
229.441 156.91 li
236.125 156.133 li
242.824 155.379 li
249.508 154.664 li
256.207 154.004 li
262.887 153.418 li
269.59 152.918 li
276.289 152.516 li
282.973 152.234 li
289.672 152.086 li
296.352 152.086 li
303.055 152.25 li
309.734 152.594 li
316.438 153.133 li
323.117 153.883 li
329.816 154.855 li
336.5 156.043 li
343.199 157.355 li
349.883 158.707 li
356.582 160.012 li
363.266 161.172 li
369.965 162.105 li
376.664 162.723 li
383.348 162.926 li
390.047 162.648 li
396.73 161.918 li
403.43 160.836 li
410.109 159.496 li
416.813 157.996 li
423.492 156.426 li
430.195 154.891 li
436.875 153.477 li
443.574 152.285 li
450.258 151.367 li
456.957 150.684 li
463.66 150.195 li
470.34 149.852 li
477.039 149.609 li
483.723 149.426 li
490.422 149.254 li
497.105 149.051 li
503.805 148.77 li
510.488 148.363 li
517.188 147.797 li
523.867 147.027 li
530.57 146.074 li
537.25 144.977 li
543.953 143.77 li
550.633 142.488 li
557.332 141.168 li
564.035 139.84 li
570.715 138.543 li
577.418 137.313 li
584.098 136.18 li
590.797 135.184 li
597.48 134.359 li
604.18 133.715 li
610.863 133.254 li
617.563 132.965 li
624.246 132.852 li
630.945 132.91 li
637.625 133.137 li
644.328 133.531 li
651.027 134.086 li
657.711 134.801 li
664.41 135.676 li
671.09 136.699 li
677.793 137.844 li
684.473 139.016 li
691.176 140.109 li
697.855 141.035 li
704.555 141.695 li
711.238 141.992 li
717.938 141.824 li
724.621 141.098 li
731.32 139.715 li
738.004 137.578 li
744.703 134.59 li
.33933 0 .45771 0 cmyk
@
82.219 214.344 mo
88.922 214.086 li
95.602 213.707 li
102.301 213.219 li
108.984 212.629 li
115.684 211.945 li
122.367 211.176 li
129.066 210.328 li
135.75 209.414 li
142.449 208.441 li
149.129 207.418 li
155.832 206.352 li
162.512 205.25 li
169.215 204.129 li
175.895 202.988 li
182.594 201.84 li
189.297 200.691 li
195.977 199.555 li
202.68 198.438 li
209.359 197.344 li
216.059 196.289 li
222.742 195.277 li
229.441 194.32 li
236.125 193.422 li
242.824 192.586 li
249.508 191.805 li
256.207 191.066 li
262.887 190.355 li
269.59 189.668 li
276.289 188.992 li
282.973 188.313 li
289.672 187.625 li
296.352 186.918 li
303.055 186.176 li
309.734 185.395 li
316.438 184.559 li
323.117 183.66 li
329.816 182.688 li
336.5 181.641 li
343.199 180.52 li
349.883 179.336 li
356.582 178.098 li
363.266 176.813 li
369.965 175.496 li
376.664 174.148 li
383.348 172.781 li
390.047 171.406 li
396.73 170.035 li
403.43 168.676 li
410.109 167.348 li
416.813 166.059 li
423.492 164.828 li
430.195 163.668 li
436.875 162.594 li
443.574 161.613 li
450.258 160.73 li
456.957 159.93 li
463.66 159.188 li
470.34 158.48 li
477.039 157.793 li
483.723 157.094 li
490.422 156.367 li
497.105 155.59 li
503.805 154.742 li
510.488 153.801 li
517.188 152.746 li
523.867 151.563 li
530.57 150.266 li
537.25 148.891 li
543.953 147.465 li
550.633 146.016 li
557.332 144.578 li
564.035 143.18 li
570.715 141.848 li
577.418 140.613 li
584.098 139.504 li
590.797 138.555 li
597.48 137.789 li
604.18 137.203 li
610.863 136.781 li
617.563 136.492 li
624.246 136.316 li
630.945 136.227 li
637.625 136.203 li
644.328 136.223 li
651.027 136.258 li
657.711 136.289 li
664.41 136.289 li
671.09 136.238 li
677.793 136.113 li
684.473 135.906 li
691.176 135.602 li
697.855 135.191 li
704.555 134.664 li
711.238 134.004 li
717.938 133.207 li
724.621 132.258 li
731.32 131.145 li
738.004 129.855 li
744.703 128.383 li
.589471 .00949111 .444343 0 cmyk
@
82.219 193.473 mo
88.922 194.668 li
95.602 195.723 li
102.301 196.633 li
108.984 197.41 li
115.684 198.059 li
122.367 198.582 li
129.066 198.988 li
135.75 199.281 li
142.449 199.465 li
149.129 199.551 li
155.832 199.535 li
162.512 199.43 li
169.215 199.242 li
175.895 198.969 li
182.594 198.621 li
189.297 198.203 li
195.977 197.723 li
202.68 197.18 li
209.359 196.586 li
216.059 195.941 li
222.742 195.254 li
229.441 194.527 li
236.125 193.77 li
242.824 192.98 li
249.508 192.156 li
256.207 191.285 li
262.887 190.363 li
269.59 189.391 li
276.289 188.355 li
282.973 187.25 li
289.672 186.074 li
296.352 184.82 li
303.055 183.48 li
309.734 182.047 li
316.438 180.52 li
323.117 178.887 li
329.816 177.145 li
336.5 175.301 li
343.199 173.371 li
349.883 171.387 li
356.582 169.371 li
363.266 167.348 li
369.965 165.348 li
376.664 163.391 li
383.348 161.504 li
390.047 159.715 li
396.73 158.027 li
403.43 156.457 li
410.109 155 li
416.813 153.668 li
423.492 152.461 li
430.195 151.387 li
436.875 150.449 li
443.574 149.652 li
450.258 148.996 li
456.957 148.453 li
463.66 148 li
470.34 147.609 li
477.039 147.254 li
483.723 146.914 li
490.422 146.563 li
497.105 146.168 li
503.805 145.715 li
510.488 145.168 li
517.188 144.512 li
523.867 143.727 li
530.57 142.867 li
537.25 142.008 li
543.953 141.219 li
550.633 140.57 li
557.332 140.137 li
564.035 139.992 li
570.715 140.203 li
577.418 140.844 li
584.098 141.992 li
590.797 143.711 li
597.48 146.066 li
604.18 149.012 li
610.863 152.418 li
617.563 156.148 li
624.246 160.074 li
630.945 164.063 li
637.625 167.98 li
644.328 171.695 li
651.027 175.082 li
657.711 178 li
664.41 180.324 li
671.09 181.922 li
677.793 182.75 li
684.473 182.914 li
691.176 182.527 li
697.855 181.719 li
704.555 180.594 li
711.238 179.281 li
717.938 177.887 li
724.621 176.539 li
731.32 175.352 li
738.004 174.441 li
744.703 173.926 li
.778347 .36994 .0740673 .000823987 cmyk
@
82.219 210.949 mo
88.922 210.219 li
95.602 209.516 li
102.301 208.844 li
108.984 208.191 li
115.684 207.555 li
122.367 206.934 li
129.066 206.324 li
135.75 205.715 li
142.449 205.105 li
149.129 204.488 li
155.832 203.867 li
162.512 203.227 li
169.215 202.57 li
175.895 201.891 li
182.594 201.18 li
189.297 200.438 li
195.977 199.66 li
202.68 198.84 li
209.359 197.977 li
216.059 197.059 li
222.742 196.086 li
229.441 195.055 li
236.125 193.957 li
242.824 192.801 li
249.508 191.598 li
256.207 190.371 li
262.887 189.129 li
269.59 187.895 li
276.289 186.68 li
282.973 185.504 li
289.672 184.387 li
296.352 183.336 li
303.055 182.379 li
309.734 181.523 li
316.438 180.789 li
323.117 180.195 li
329.816 179.754 li
336.5 179.465 li
343.199 179.273 li
349.883 179.129 li
356.582 178.98 li
363.266 178.766 li
369.965 178.438 li
376.664 177.938 li
383.348 177.211 li
390.047 176.219 li
396.73 174.992 li
403.43 173.613 li
410.109 172.16 li
416.813 170.723 li
423.492 169.375 li
430.195 168.203 li
436.875 167.285 li
443.574 166.699 li
450.258 166.488 li
456.957 166.59 li
463.66 166.945 li
470.34 167.492 li
477.039 168.168 li
483.723 168.906 li
490.422 169.645 li
497.105 170.324 li
503.805 170.875 li
510.488 171.238 li
517.188 171.352 li
523.867 171.164 li
530.57 170.699 li
537.25 170.008 li
543.953 169.129 li
550.633 168.113 li
557.332 167 li
564.035 165.84 li
570.715 164.676 li
577.418 163.551 li
584.098 162.516 li
590.797 161.613 li
597.48 160.883 li
604.18 160.324 li
610.863 159.898 li
617.563 159.563 li
624.246 159.289 li
630.945 159.027 li
637.625 158.75 li
644.328 158.414 li
651.027 157.98 li
657.711 157.41 li
664.41 156.672 li
671.09 155.719 li
677.793 154.539 li
684.473 153.141 li
691.176 151.539 li
697.855 149.742 li
704.555 147.773 li
711.238 145.641 li
717.938 143.363 li
724.621 140.949 li
731.32 138.414 li
738.004 135.773 li
744.703 133.039 li
.753658 .797055 .0132753 .000610361 cmyk
@
.273228 1 .618616 .191989 cmyk
%ADOBeginSubsetFont: GAAAAA+ArialMT Initial
ct_T42Dict begin
-0.664 -0.324 2 1.039
 256 array 0 1 255 {1 index exch /.notdef put} for  /GAAAAA+ArialMT
Type42DictBegin
[<00010000000a000a000a000a63767420adbfdf8e000000ac0000066e6670
676d38a5162b0000071c00000bb0676c796620ccf8b60000212c00007408
68656164eb4b56cd000012cc0000003668686561123308ff000013040000
0024686d7478ea1b144000001328000000d86c6f6361000c81c400001400
000000dc6d617870062c09af000014dc0000002070726570a1b2e8ea0000
14fc00000c2f6764697200000000000000000000000005ba001905ba001a
05a70019042600180000ffe70000ffe80000ffe7fe69ffe805ba0019fe69
ffe802ea000000b8000000b80000000000a800ad016900ad00bf00c201f0
001800af00b900b400c800170044009c007c009400870006005a00c80089
005200520005004400940119ffb4002f00a1000300a100cd00170057007e
00ba00160118ffe9007f008503d300870085000d002200410050006f008d
014cff75005c00df04830037004c006e00700180ff58ff8eff92ffa400a5
00b903c8fffd000b001a0063006300cdffee05d8ffdc002d005c00950099
00df019209b500400057008000b9039d0072009a035d0401ff67fffa0003
0021007700cd0004004d00cd01c0022b004c006500e70118017c034305d8
ffa3ffb0ffc40003001c005d0068009a00ba013501470221055cff4dffcd
0016002d00780080009900b200b600b600b800bd00da010c05f0ffa4fff0
0019002c0049007f00b400ce01c003fefd81fe3f00000005001800290039
0049006f00be00c700d0012301c1026f050c05320540057affd400140031
0055005700a700b400e601f7027e027e027f03c60446ff42000e00850091
00bf00c200c500e1011a012f014f01560229026f029e03720008002c0031
0031006400690089009800c700de012b01b6020c02cf03a304ab04fb061d
fee0ff0e00060026009b009d00c1010d011801200173018201d601e30243
025f029b02e2039404a904d20761001c005e006d008d00ab00f701120138
0151015b0168017c01870191019901cd01d001e802410254026b02ef0368
037103bd044204420453047304830586058b06e8fe58fec4fed1fef7ff32
ff860051007c008100910095009e00b400b900cf00d900d900df00e20105
010b010e010e012001210155017b017b017e018d01a201a801a901b401d0
01d001e201e901f201f501fb020002000206021b02210222022202230272
02770294029c02cf02cf02d002ec02f903170322032b0335033c0359036f
037103870390039003b503e1041a04cf04ff053205320596059f05a805ab
05c205f0060c0782080008ccfca3fd2afddefe00fe88fe96feb2feb4ffe1
00150019001a001c001f003c005100610061006a0078009600a500af00d3
010c0118011a012a013e014c0151015f016a0171017801820184019a01a5
01a801a901ae01bc01cd01d701ef0200020d021c02210222022e02350242
024f024f025e026502710290029202b402d602fa0307030b030f0315032a
0347035d036503740379039603b003cc03dd03e203f603fc03fc03ff040a
041f04220426042b0447045f0475049e04e704e7055c05cb05e5060a066d
068606b806f10736073e07500751075d078f07b607d4086000b600c300b5
00b700000000000000000000000001e00381034503b5008e0233041902ce
02ce002d005f0064034d023f000002a80188027d01b402240578063b023b
014e00f00426029402c6029f02f6023b034d014b0153006a023100000000
0000061404aa0000003c04c300ed04bc026502ce03b50078060c017e02ef
060c00b201000239000001c50330042b03cb00da03df010704a100db040a
011701ed02a70350010b01bd043e05580021039c00ae0371017d00b50245
00000afb088c012b014e01aa00870054013201f803ff0003024e00b40037
03e30083006b02d800ed00770088009701640467008e0033017c00e700a6
029e0329056e062a061501c90269048a021301b4000204a9000002390124
010305140084015d039a06ef02d9007500cf040a00de03ac04bc02cf02ae
034d04f005520168006d007d00860071ff810079055804d2016700030156
002504e00094007c033204210094007f0072005c002f00b6001800ba00b8
0041034d00720018001f004c016a01550099009a009a009800b200040078
006900140057006e00ce00b4065402b80067050e016500e7000004cbfe52
005affa60099ff67006eff92002dffd40087ff7c00b800a800e5008f00a8
0185fe7b0070001e00d900de014c054602cf0546ff2d028a02d902530296
00b700000000000000000000000000000125011800ea00ea00ae0000003e
05bb008a04d70053003fff8cffd500150028002200990062004a00e4006d
00ee00e5004803c00033fe4e02b1ff460370007905df0051ffa7ff1f010a
0068ff6c004f00bc00a507050061072b00ed04b001d200b6007b00650252
ff740365fe690094008f005c004000860075008900890471048304f9008c
00910096009b00a000a500aa00af00b400b90000405b8574737271706f6e
6d6c6b6a6968676665625d58575655544f4e41403f3e3d3c3b3a39383735
34333231302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a191817
161514131211100f0e0d0c0b0a090807060504030201002c4523466020b0
2660b004262348482d2c452346236120b02661b004262348482d2c452346
60b0206120b04660b004262348482d2c4523462361b0206020b02661b020
61b004262348482d2c45234660b0406120b06660b004262348482d2c4523
462361b0406020b02661b04061b004262348482d2c0110203c003c2d2c20
452320b0cd442320b8015a51582320b08d44235920b0ed51582320b04d44
235920b09051582320b00d44235921212d2c20204518684420b001602045
b04676688a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d
2c00b0172370b101173e01b0172370b10217453ab10200080d2d2c45b01a
234445b01923442d2c2045b00325456164b050515845441b2121592d2cb0
0143632362b0002342b00f2b2d2c2045b0004360442d2c01b00643b00743
650a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c
58b00361592d2c45b0112bb0172344b0177ae4182d2c45b0112bb0172344
2d2cb01243588745b0112bb0172344b0177ae41b038a45186920b0172344
8a8a8720b0a05158b0112bb0172344b0177ae41b21b0177ae45959182d2c
2d2cb0022546608a46b040618c482d2c4b53205c58b002855958b0018559
2d2c20b0032545b019234445b01a23444565234520b00325606a20b00923
4223688a6a606120b01a8ab000527921b21a1a40b9ffe0001a45208a5458
2321b03f1b235961441cb114008a5279b31940201945208a54582321b03f
1b235961442d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d4323
430b2d2cb10c0d432343650b2d2cb10e0f432343650b2d2cb11011432343
650b2d2c4b525845441b2121592d2c0120b003252349b04060b0206320b0
00525823b002253823b002256538008a63381b212121212159012d2c4bb0
6451584569b00943608a103a1b212121592d2c01b005251023208af500b0
016023edec2d2c01b005251023208af500b0016123edec2d2c01b0062510
f500edec2d2c20b001600110203c003c2d2c20b001610110203c003c2d2c
b02b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76b802
2323701020b802234520b0005058b00161593a2f182d2c21210c6423648b
b84000622d2c21b08051580c6423648bb82000621bb200402f2b59b00260
2d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c64
23648bb84000626023212d2cb4000100000015b00826b00826b00826b008
260f10161345683ab001162d2cb4000100000015b00826b00826b00826b0
08260f1016134568653ab001162d2c4b53234b515a5820458a60441b2121
592d2c4b545820458a60441b2121592d2c4b53234b515a58381b2121592d
2c4b5458381b2121592d2cb0134358031b02592d2cb0134358021b03592d
2c4b54b012435c5a58381b2121592d2cb012435c580cb00425b00425060c
6423646164b807085158b00425b00425012046b01060482046b010604859
0a21211b2121592d2cb012435c580cb00425b00425060c6423646164b807
085158b00425b00425012046b8fff060482046b8fff06048590a21211b21
21592d2c4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b03b2b
1b2121592d2c4b53234b515ab012435c5a58381b2121592d2c0c8a034b54
b00426024b545a8a8a0ab012435c5a58381b2121592d2c4b5258b00425b0
042549b00425b00425496120b0005458212043b0005558b00325b00325b8
ffc038b8ffc038591bb04054582043b0005458b00225b8ffc038591b2043
b0005458b00325b00325b8ffc038b8ffc0381bb00325b8ffc03859595959
212121212d2c462346608a8a462320468a608a61b8ff8062232010238ab9
02c202c28a70456020b0005058b00161b8ffba8b1bb0468c59b010606801
3a2d2c2320b000508a8a64b10003255458b0401bb10103255458b037438b
59b04f2b5923b0622b2321235865592d2cb13a000c215460432d2cb10200
42b123018851b1400188535a58b910000020885458b202010243604259b1
2401885158b920000040885458b2020202436042b12401885458b2022002
436042004b014b5258b2020802436042591bb940000080885458b2020402
43604259b94000008063b80100885458b202080243604259b94000010063
b80200885458b202100243604259b12601885158b94000020063b8040088
5458b202400243604259b94000040063b80800885458b202800243604259
b12801885158b94000080063b81000885458ba0002010000024360425959
5959595959b10002435458400a37403a403b403e023f021bb10102435458
b237403aba0100003b0100b33e013f011bb18002435258b237403ab80180
b13b401bb901000002435258b237403aba0180003b01401bb90180000243
5258b237403ab80200b13b401bb237403aba0100003b0100595959b94000
00808855b94000020063b8040088555a58b33e003f011bb33e003f015959
5942424242422d2cb0024354584b53234b515a58381b2121591b21212121
592d2cb0572b580c028a4b53b004264b515a580a381b0a2121591b212121
21592d2c20b0024354b00123b05f237821b1000243b056237921b0024323
b020205c58212121b100471c598a8a208a208a23b81000635658b8100063
5658212121b1012c1c591b2159b08062205c58212121b1001b1c5923b080
62205c58212121b1000c1c598ab00161b8ffb31c23212d2c20b0024354b0
0123b07b237821b1000243b072237921b10002438ab020205c58212121b0
631c598a8a208a208a23b81000635658b81000635658b00426b0015bb004
26b00426b004261b21212121b13600231c591b2159b0042623b08062205c
588a5c8a5a23212321b01d1c598ab08062205c5821212321b00e1c59b004
26b00161b8ff981c23212d2c012d2cb0022563b0206066b00225b8200062
6023622d2c234ab1024e2b2d2c234ab1014e2b2d2c238a4a234564b00225
64b002256164b03543525821206459b1024e2b23b000505865592d2c238a
4a234564b0022564b002256164b03543525821206459b1014e2b23b00050
5865592d2c20b003254ab1024e2b8a103b2d2c20b003254ab1014e2b8a10
3b2d2cb00325b003258ab0672b8a103b2d2cb00325b003258ab0682b8a10
3b2d2cb0032546b003254660b004252eb00425b00425b0042620b0005058
21b06a1bb06c592bb0032546b00325466061b08062208a2010233a232010
233a2d2cb0032547b003254760b0052547b0806361b00225b00625496323
b005254ab080632058621b2159b0042646608a468a4660b02063612d2cb0
0426b00425b00425b00426b06e2b208a2010233a232010233a2d2c2320b0
01545821b00225b1024e2bb0805020605920606020b001515821211b20b0
05515821206661b0402361b100032550b00325b00325505a5820b0032561
8a535821b000591b21591bb00754582066616523211b2121b000595959b1
024e2b2d2cb00225b004254ab0005358b0001b8a8a238ab00159b0042546
20666120b00526b0062649b00526b00526b0702b236165b02060206661b0
2061652d2cb0022546208a20b000505821b1024e2b1b452321596165b002
25103b2d2cb0042620b802006220b80200638a236120b05d602bb0052511
8a128a20398a58ba005d10000004266356602b23212010204620b1024e2b
23611b2321208a201049b1024e2b593b2d2cba005d10000009256356602b
b00525b00525b00526b06d2bb15d0725602bb00525b00525b00525b00525
b06f2bba005d10000008266356602b20b0005258b0502bb00525b00525b0
0725b00725b00525b0712bb0021738b00052b00225b001525a58b00425b0
062549b00325b00525496020b0405258211bb000525820b0025458b00425
b00425b00725b0072549b00217381bb00425b00425b00425b0062549b002
1738595959595921212121212d2cb12501885058b94000020063b8040088
545cb0124b525b1bb001592d0001000000070000b1114fb05f0f3cf5081b
080000000000a2e3272a00000000d684e4ecfaaffd671000085100000009
000100010000000000010000073efe4e00431000faaffa7a100000010000
00000000000000000000000000360600010004e300300473003c0473004d
047300df047300560473001a047300550473005304730055047300550239
00ba055600060473004b0473004a02aa0085047300440473008701c70088
04000050023900000556009e0400001a01c7008304730087023900bf0473
0046023900240400002105560009078d00190400008806aa009804730087
023900b904730048047300830556005c05c700660639006d047300860400
00280556fffd0400003f05c700a10239001302aa004106aa008705c700a4
0473004204730061023900000473009605c7009e000000000000006c0000
01a800000434000006a4000007e000000a5800000cb000000f1400001270
000014dc000017bc0000180c00001aa800001d2c000020f4000022380000
2490000026c8000028f800002bb400002bb400002d3800002fd00000316c
0000339c00003504000037780000393400003c5c00003ed4000042300000
45780000491000004b1c00004b9000004db000004fb80000539000005528
0000574c000059bc00005be400005eb00000636000006650000067f80000
685000006c2800006d9c0000704800007110000071900000725400007408
00010000003602b5003c00ca000700020010004000860000051705ec0005
0002b15485410b032c032c032c0222001d001f032b032a003c001f032ab2
061d1fb80328b326181fd0bc032900e0032900020329b22b1d1fb9032703
1db23b1f40b80323b31215320f412d03200001002f032000010020032000
6f032000af032000bf03200004005f031e00010010031e007f031e008003
1e00af031e00bf031e00d0031e00060000031e0010031e0020031e006f03
1e009f031e00e0031e0006031d031cb2201f1041270319007f0319000200
0f031700ef031700ff03170003001f0317002f0317004f0317005f031700
8f0317009f03170006000f0317005f0317006f0317007f031700bf031700
f00317000600400317b2923340b80317b28b3340b80317b36a6c3240b803
17b2613340b80317b35c5d3240b80317b357593240b80317b34d513240b8
0317b344493240b80317b23a3340b80317b331343240b80317b32e423240
b80317b3272c3240b80317b312253280b80317b30a0d32c04116031600d0
0316000200700316000102c4000f0101001f00a0031500b0031500020306
000f0101001f00400312b32426329fbf03040001030203010064001fffc0
0301b20d1132410a02ff02ef0012001f02ee02ed0064001fffc002edb30e
11329f414a02e200af02e200bf02e2000302e202e202e102e1007f02e000
01001002e0003f02e0009f02e000bf02e000cf02e000ef02e0000602e002
e002df02df02de02de000f02dd002f02dd003f02dd005f02dd009f02dd00
bf02dd00ef02dd000702dd02dd001002dc0001000002dc0001001002dc00
3f02dc000202dc02dc001002db000102db02db000f02da000102da02daff
c002d3b2373932b9ffc002d3b22b2f32b9ffc002d3b21f2532b9ffc002d3
b2171b32b9ffc002d3b2121632b802d2b2f9291fb90326031cb23b1f40bb
0322003e00330322b225311fb80318b23c691fb802e3b3202b1fa0413002
d400b002d40002000002d4001002d4002002d4005002d4006002d4007002
d40006006002d6007002d6008002d6009002d600a002d600b002d6000600
0002d6001002d6002002ca002002cc002002d6003002d6004002d6005002
d6000802d0b2202b1fb802cfb226421f411602ce02c70017001f02cd02c8
0017001f02cc02c60017001f02cb02c50017001f02c902c5001e001f02ca
02c6b21e1f00410b02c6000002c7001002c6001002c7002f02c5000502c1
b324121fff411102bf0001001f02bf002f02bf003f02bf004f02bf005f02
bf008f02bf000602bf0222b2641f12410b02bb00ca0800001f02b200e908
00001f02a600a20800406a1f4026434932402043493240263a3d3240203a
3d329f209f26024026969932402096993240268e923240208e9232402684
8c324020848c3240267a813240207a813240266c763240206c7632402664
6a324020646a3240265a5f3240205a5f3240264f543240204f5432b8029e
b724271f374f6b0120410f02770030027700400277005002770004027702
77027700f90400001f029bb22a2a1fb8029a402b292a1f80ba0180bc0180
520180a201806501807e01808101803c01805e01802b01801c01801e0180
400180bb0138000100800140b40180400180bb0138000100800139401801
80ca0180ad018073018026018025018024018020013740b80221b2493340
b80221b2453340b80221b341423240b80221b33d3e320f410f0221003f02
21007f0221000300bf022100cf022100ff0221000300400221b320223240
b80221b3191e3240b80222b32a3f3240b80221b32e3a326f414a02c3007f
02c3008f02c300df02c30004002f02c3006002c300cf02c30003000f02c3
003f02c3005f02c300c002c300ef02c300ff02c3000600df02220001008f
02220001000f0222002f0222003f0222005f0222007f022200ef02220006
00bf022100ef02210002006f0221007f022100af02210003000f0221002f
0221003f0221004f0221000402c302c30222022202210221401d101c102b
1048038f1c010f1e014f1eff1e023700161600000012110811b8010db6f7
0df8f70d00094109028e028f001d001f0290028f001d001f028fb2f91d1f
b80198b226bb1f41150197001e0401001f013900260125001f0138007304
01001f0135001c0801001f0134001c02ab001f0132b21c561fb8010fb226
2c1fba010e001e0401b61ff91ce41fe91cb80201b61fe81cbb1fd720b804
01b21fd51cb802abb61fd41c891fc92fb80801b21fbc26b80101b21fba20
b80201b61fb91c381fadcab80401b21f8126b8019ab21f7e26b8019ab61f
7d1c471f6b1cb80401b21f6526b8019ab21f5e73b80401400f1f52265a1f
481c891f441c621f4073b80801b61f3f1c5e1f3c26b8019ab21f351cb804
01b61f301cbb1f2b1cb80401b61f2a1c561f291cb80101b21f231eb80401
b41f35555537b80168402c07960758074f07360732072c0721071f071d07
1b071408120810080e080c080a080808060804080208000814b8ffe0402b
000001001406100000010006040000010004100000010010020000010002
00000001000002010802004a00b013034b024b5342014bb0c063004b6220
b0f65323b8010a515ab005234201b0124b004b5442b0382b4bb807ff52b0
372b4bb007505b58b101018e59b0382bb00288b801005458b801ffb10101
8e851bb0124358b900010111858d1bb900010128858d5959001816763f18
3f123e113946443e113946443e113946443e113946443e11394660443e11
394660442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b182b1d
42b0964b5358b235aaaa1d4259b0324b5358b235ffff1d42594bb0935320
5c58b901f201f04544b901f101f045445958b9033e01f2455258b901f203
3e4459594bb8015653205c58b9002001f14544b9002601f145445958b908
1e0020455258b90020081e4459594bb8019a53205c58b9002501f24544b9
002401f245445958b909090025455258b9002509094459594bb804015320
5c58b173244544b1242445445958b917200073455258b900731720445959
4bb8040153205c58b1ca254544b1252545445958b9168000ca455258b900
ca16804459594bb03e53205c58b11c1c4544b11e1c45445958b9011a001c
455258b9001c011a4459594bb05653205c58b11c1c4544b12f1c45445958
b90189001c455258b9001c01894459594bb8030153205c58b11c1c4544b1
1c1c45445958b90de0001c455258b9001c0de04459592b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b65422b2b01b33b59635c456523456023456560234560b08b766818
b080622020b163594565234520b003266062636820b003266165b0592365
44b063234420b13b5c4565234520b003266062636820b003266165b05c23
6544b03b2344b1005c455458b15c406544b23b403b4523614459b3475034
37456523456023456560234560b089766818b080622020b1345045652345
20b003266062636820b003266165b050236544b034234420b14737456523
4520b003266062636820b003266165b037236544b0472344b10037455458
b137406544b24740474523614459004b5342014b5058b108004259435c58
b108004259b3020b0a124358601b2159421610703eb0124358b93b21187e
1bba040001a8000b2b59b00c2342b00d2342b0124358b92d412d411bba04
000400000b2b59b00e2342b00f2342b0124358b9187e3b211bba01a80400
000b2b59b0102342b0112342002b74757375001845694445694445694473
73737374757374752b2b2b2b74752b2b2b2b2b7373737373737373737373
73737373737373737373737373732b2b2b45b0406144737400004bb02a53
4bb03f515a58b1070745b040604459004bb03a534bb03f515a58b10b0b45
b8ffc0604459004bb02e534bb03a515a58b1030345b040604459004bb02e
534bb03c515a58b1090945b8ffc06044592b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b752b2b2b2b2b2b2b435c58b9008002bbb301401e0174007359
03b01e4b5402b0124b545ab012435c5a58ba009f02220001007359002b74
73012b01732b2b2b2b2b2b2b2b737373732b2b2b2b2b002b2b2b2b2b2b00
456944734569447345694473747545694473456944456944456944737445
6944456944732b2b2b2b2b732b002b732b74752b2b2b2b2b2b2b2b2b2b2b
2b2b2b737475732b7374757374752b2b2b742b002b2b2b00184569442b5c
58410e0336032f0041001f0330032f002d001f032d032f0032001f033203
2f4012261f0302371f0908371f0b0a441f0706441f2b2b2b2b2b2b2b2b59
2b0000>
[16085 13621 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 424 2 <0001003c0000040705c0001e0227b0852b58b10602435458400911100d18
131306550db8fff4b4111106550db8ffee4009101006550d1e14051eb8ff
e84017131306551e1e111106551e1c0e1006551e0c0d0d06551eb802bb40
0c020a1717201f10110202201f1112392fd4cd1112392fcd002fed2b2b2b
2b3fed2b2b2bc43231301bb10202435458400911100d0c121202550db8ff
f440090f1102550d1e14051eb8ffe0400b121302551e140f1102551eb802
bbb2020a17b8ffe8b40b0b025517b8ffec400e0d0d02551717201f101102
02201f1112392fd4cd1112392f2b2bcd002fed2b2b3fed2b2bc43231301b
40473b053b06bb05bf06bb07c708c91c07490c590c540e6b0c640e7a127a
138912bc12e51ae51bf01a0cbf0bb713021e0a10080606ca1c1a141c1c1a
081c1a030102081a1c030d1e10b802a4b34f110111b80118b50d1e140500
1eb802bbb301020c0a4110fff4000c000c01400056000afff2000b000b01
400056000afff8000d000d0140400d560a7317d30000014021233401bb02
81002000100138400c11b53f025f026f027f020402ba0224001f018fb18b
182b10f65df4ed10f62b3c10f4ed2b2b2b003f3cfd3c3fedfd5de4111217
390111121739870e2e2b0e7d10c4011112393130b00243b040505840091b
101c101d101e1006befff00007ffe00008fff00009fff000383838380138
38383859005d015d7259591b400910100d1b07070d021eb80333b46c020c
140db8032fb26c140500183f2b3f2b1139113312392f3031592515212637
36363736363534262322060727363633321615140606070606070407fc37
021725a39aefa8997b829c01b913f8d1d3f648a7c2a25c1eadad413c63c0
7ec4e5666b939c8a13cfd9eaad58aabca48861310000>GAAAAA+ArialMT AddT42Char 
1 108 1 <00010030000004ba05ba00070117b0852b58b306020c0cb80140b4560702
0c0cb80140b45606070b0bb80140b45607070b0b410d014000560001fff9
000b000b014000560000fff9000b000b0140b45606050c0db80140b45607
050c0d410d014000560001fffb000c000d014000560000fffb000c000d01
40400e5605021e04030200080706050409b80273b320040104b80101b706
2001022f030103b80101b5010120000100b8ffe8400b1010025500080f0f
025500b8fff2b40c0c025500b8ffe2b40d0d025500b8fffcb40c0c065500
b8fffeb40d0d065500b80273b308b699182b10f62b2b2b2b2b2b5d3c10f4
5d3c10fde45de6103c103c003f3f3cfd3c3130012b2b2b2b2b2b2b2b2b2b
1bb40008060302b80333b26c030200183f2b323f30315921112135211521
110213fe1d048afe1b050dadadfaf300>GAAAAA+ArialMT AddT42Char 
1 0 0 <00020100000005000500000300070042b40201e40607b802994013000504
e403000a0704e4010019080605e40203bc023100090199012e00182b10f6
3cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd3c31302111211125211121
01000400fc2003c0fc400500fb002004c000>GAAAAA+ArialMT AddT42Char 
GAAAAA+ArialMT /CharStrings get begin
/two 2 def
/T 1 def
end
GAAAAA+ArialMT /Encoding get
dup 50 /two put
dup 84 /T put
pop
end
%ADOEndSubsetFont
/OGDYIY+ArialMT /GAAAAA+ArialMT findfont ct_VMDictPut
/OGDYIY+ArialMT*1 
[50{/.notdef}rp /two 33{/.notdef}rp /T 171{/.notdef}rp]
OGDYIY+ArialMT nf
OGDYIY+ArialMT*1 [11.0397 0 0 -11.0397 0 0 ]msf
748.918 31.2422 mo
(T2)
[6.73419 0 ]xsh
.108858 .909636 .654292 .0150454 cmyk
%ADOBeginSubsetFont: GAAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal OGDYIY+ArialMT gcheck setglobal} if
1 1076 3 <0002004dffe7041505c0001d002a01e9b0852b58b10202435458401f0f01
1f015f0103011b281e400d010d0d14051e1b05221e140d0a1e01002510b8
fff440190d0d0255101e17100f0f025517100c0c0255170c0d0d0255172f
2b2b2bcd2f2bcdd4cd10c5003fed3fed12392f5ded10c45d31301b402d6b
190144074015441944205a1254206b03640764086a1264207408751c8508
861cd608d4161107200d0d065527b8ffe0b40d0d065523b8ffe0401b0d0d
065521200d0d0655281e400d500d020d0d141b01d35f000100b802684009
051e1b05221e140d01b80138b200b5254110fff4000c000c014000560025
fff2000b000b014000560025fff8000d000d014040115625731040212334
301001001010100210b8fff0b70c0c065510902c0ab80138b31e0c0c0cb8
0140b4561e0e0b0bb80140b4561e080d0dbb01400056001e0139400d3f17
5f176f177f170417100b0bb80140b45617100c0db80140400e5617160c0c
065517160d0d065517b80224b32bc78b182b10f62b2b2b2b5ded2b2b2bed
10f62b5d712bed2b2b2bf4ed003fed3fedfd5de41112392f5ded3130b002
43b0405058b90007ffe0b42720232021b8ffe00138383838592b2b2b2b01
5d005d591bb50101050a0d28b8032fb56c0d0d1b1422b8032fb46c140d1b
05b8032fb26c1b0500183f2b3f2b11392f2b3212392f3031590107262726
232207060607363633321215140606232200111037363332160114161633
323635342623220603fbb3182c496b564155620241bc67b4fd77d084e1fe
e49d89e8adddfd374f8e4e72a4a27b7aaa04530e6a304d303eeedc6360fe
f7d28aed7e014b017c01a9c1a8c2fcdd5daa59b89e98afaf>OGDYIY+ArialMT AddT42Char 
OGDYIY+ArialMT /CharStrings get begin
/six 3 def
end
OGDYIY+ArialMT /Encoding get
dup 54 /six put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/OGDYIY+ArialMT*1 
[50{/.notdef}rp /two 3{/.notdef}rp /six 29{/.notdef}rp /T 171{/.notdef}rp]
OGDYIY+ArialMT nf
OGDYIY+ArialMT*1 [11.0397 0 0 -11.0397 0 0 ]msf
749.156 166.297 mo
(T6)
[6.73419 0 ]xsh
.194034 .858488 0 0 cmyk
%ADOBeginSubsetFont: GAAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal OGDYIY+ArialMT gcheck setglobal} if
1 1700 4 <000100df000002fb05c0000a010eb0852b58b30a0c0c0cb80140b456000c
0c0cb80140b4560a0e0b0bb80140b456000e0b0bb80140b4560a080d0db8
0140b45600080d0db8014040215603400d11346b047f028f02990804ac04
010900060502030905010c0201ca0a00b8ffc0400a212334300001200001
00b8ffe0b41010025500b8ffea40110f0f0255001c0c0c0255000e0d0d02
5500b8fff040190f0f065500100c0c065500100d0d0655001a0c05400d0f
3405b8ffc0400e212334300501200540050205190bba013c018500182b4e
10e45d712b2b10f62b2b2b2b2b2b2b5d712b3c4dfd3c003f3f1739011139
3130015d005d2b012b2b2b2b2b2b1b400c0201090640050509010c090500
183f3f12392f1acd111239303159212311060607353636373302fbb441d3
5497e22f74047b3e7c1fae47ca5f0000>OGDYIY+ArialMT AddT42Char 
OGDYIY+ArialMT /CharStrings get begin
/one 4 def
end
OGDYIY+ArialMT /Encoding get
dup 49 /one put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/OGDYIY+ArialMT*1 
[49{/.notdef}rp /one /two 3{/.notdef}rp /six 29{/.notdef}rp /T 171{/.notdef}rp]
OGDYIY+ArialMT nf
OGDYIY+ArialMT*1 [11.0397 0 0 -11.0397 0 0 ]msf
718.488 171.922 mo
(T16)
[6.73419 6.13806 0 ]xsh
0 .369329 .695216 0 cmyk
%ADOBeginSubsetFont: GAAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal OGDYIY+ArialMT gcheck setglobal} if
1 2016 5 <00010056ffe6041605c0002b01f6b0852b58b10202435458400b1918400d
0d0255181c0001b8ffc0402b0c0d02550129230a0d0f0c0f1e0a0a29151e
1c041e291c05290d230d0c181901001220100c0c0255200726b8ffe8b40c
0d0255262f2bcd2f2bcd2fcd2fcd2f0012393f3f10ed10ed12392fedc610
c6123910c42b3210c42b3231301b4030050d160d450d860d044511571176
1b0352166c106a146416750d7914860d8a14891ba50d0a0b0c0d0e040701
230d0c01b802a4b340000100bb01180029000d0135b40c0c150418ba02a4
001902684009151e1c05041e290d124110fff4000c000c014000560012ff
f2000b000b014000560012fff8000d000d014040115612735f206f200220
180d0d06552080074110fff4000c000c014000560007fff2000b000b0140
00560007fff8000d000d0140401156077326402123343026010026102602
26b8fff4b70d0d065526902d18b80138b219d301ba01380000ffc0400b21
2334200040000200902cb80192b18b182b10f65d2bedf4ed10f62b5d712b
ed2b2b2bf42b5ded2b2b2b003fed3fedfde41112392fed10fd5de4111239
01111217393130b00243b0405058b2052003b8ffe001383859015d005d01
71591b400900010104230c0d0f0ab8032fb56c0f0f1c2904b8032fb76c29
0d1918181c15b8032fb26c1c0500183f2b322f333f2b11392f2b33323911
392f33303159133716163332363534262322073716333236353426232206
072736363332161615140607161615140023222656b41f956b7fafa27d33
4c14120b73b8866a698c14b421eaae78ca6b66648290fee8d6c1ff018318
9987b0827ca1149e02787d6382848420b5c767b2645f9c2e1ebd8ec0fef5
e600>OGDYIY+ArialMT AddT42Char 
OGDYIY+ArialMT /CharStrings get begin
/three 5 def
end
OGDYIY+ArialMT /Encoding get
dup 51 /three put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/OGDYIY+ArialMT*1 
[49{/.notdef}rp /one /two /three 2{/.notdef}rp /six 29{/.notdef}rp /T 
171{/.notdef}rp]
OGDYIY+ArialMT nf
OGDYIY+ArialMT*1 [11.0397 0 0 -11.0397 0 0 ]msf
721.645 116.867 mo
(T32)
[6.73419 6.13806 0 ]xsh
1 .829374 .351232 .255924 cmyk
%ADOBeginSubsetFont: GAAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal OGDYIY+ArialMT gcheck setglobal} if
1 3248 7 <00020055ffe7041105c00010001d01feb0852b58b10202435458400a1a1e
0405141e0d0d1709b8ffe8b40f0f025509b8ffe840190d0d02550911000c
0f0f025500160c0c0255000c0d0d0255002f2b2b2bcd2f2b2bcd003fed3f
ed31301bb10602435458400a1a1e0405141e0d0d1709b8fff4b40f0f0655
09b8ffe6b40d0d065509b8ffee40190b0b0655091100100d0d065500100c
0c065500100b0b0655002f2b2b2bcd2f2b2b2bcd003fed3fed31301b404e
04068702880b880fc90e0509070b180245134c154a19431b54135c155c19
521b6b076b0b63136c156b19601b79027706760b7a0f870698079610c918
da02d606d60bdb0f1a1a1e0405141e0d0d174110fff4000c000c01400056
0017fff2000b000b014000560017fff8000d000d01404011561773094021
2334300901000910090209410afff4000b000b014000560009ffe8000d00
0d0140b75609901f110c0c0cb80140b456110e0b0bb80140b45611080d0d
b80140b356117300b8ffc0400c2123342000400002000c0c0cb80140b456
00080b0bb80140b45600080d0db80140b65600901ec78b182b10f62b2b2b
5d2bed2b2b2b10f62b2b5d712bed2b2b2b003fed3fed3130015d71005db0
0243b0405058b4062019101cb8fff0b202200bbeffe00016ffe00012ffe0
000fffe0003838383838013838385959591bb10d14b8032fb46c0d0d041a
b8032fb26c040500183f2b3f2b3031591310123633321616121510020623
22272613101633323611102623220706556bd3a076b274426ad3a1d47991
b9a97c7ca9a97e7c4a5d02d30104013dac5fb3feffdafefefec3ad98b701
9dfe97eff00168016aee6986>OGDYIY+ArialMT AddT42Char 
1 2648 6 <0002001a0000041005ba000a000d021cb0852b58bc000cfffa000c000c01
40b4560d060c0cb80140b456050c0c0cb80140b456060c0c0cb80140b456
090c0c0cb80140b4560a0c0c0cb80140b456050e0b0bb80140b456060e0b
0bb80140b456090e0b0bb80140b4560a0e0b0bb80140b45607080c0cb801
40b45608080c0cb80140b45607080b0bb80140b45608080b0bb80140b456
07080d0db80140b45608080d0db80140b45605080d0db80140b45606080d
0db80140b45609080d0db80140b4560a080d0db8014040375612580c680c
9a0ca90cc90c054c034c0d94040312010208000c060307050a0b0307000c
0c0d0dca030414030304030d00020c0d040703bb02bb0008000201a0400a
000404000c0c00ca0a04b80266b705050a401d1f340ab8ffe0b410100255
0ab8ffe6b40d0d02550ab8ffeeb40d0d06550ab80137400d074022233407
80213507900f02b8ffc0400b0d14340002100220020302b8ffe0b40d0d02
5502b8ffe4b60d0d065502b50eb8018cb18b182b10ec2b2b5d2b10f62b2b
f42b2b2b2b3c10e610fd3c003f3f10f43cf63c1139390111123939872e2b
047d10c40f0f0f313001435c58b9000dffdeb212390db8ffd4400b333903
222d3903041d1d3c2b2b2b2b595d005d435c5840140c400b390c8050390c
4026390c221c390c402d392b2b2b2b2b59012b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b002b1bb60c040906030d02b80332b76c0d0d04000c0405
00183f3f12392f2b33333212393031592111213501331133152311031101
0296fd84029d93c6c6b4fe35015fa503b6fc4aa5fea102040295fd6b0000
>OGDYIY+ArialMT AddT42Char 
OGDYIY+ArialMT /CharStrings get begin
/zero 7 def
/four 6 def
end
OGDYIY+ArialMT /Encoding get
dup 48 /zero put
dup 52 /four put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/OGDYIY+ArialMT*1 
[48{/.notdef}rp /zero /one /two /three /four /.notdef /six 
29{/.notdef}rp /T 171{/.notdef}rp]
OGDYIY+ArialMT nf
OGDYIY+ArialMT*1 [11.0397 0 0 -11.0397 0 0 ]msf
748.766 71.0898 mo
(T40)
[6.73419 6.13806 0 ]xsh
.250797 .411353 1 .0362249 cmyk
OGDYIY+ArialMT*1 [11.0397 0 0 -11.0397 0 0 ]msf
721.832 146.992 mo
(T41)
[6.73419 6.13806 0 ]xsh
1 lc
760.051 141.367 mo
744.703 134.59 li
.33933 0 .45771 0 cmyk
@
OGDYIY+ArialMT*1 [11.0397 0 0 -11.0397 0 0 ]msf
752.387 151.07 mo
(T44)
[6.73419 6.13806 0 ]xsh
756.066 122.574 mo
744.703 128.383 li
.589471 .00949111 .444343 0 cmyk
@
%ADOBeginSubsetFont: GAAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal OGDYIY+ArialMT gcheck setglobal} if
1 3860 8 <00030053ffe7041905c000170023003002c6b0852b58b10202435458b40c
001b1e2eb8ffc04017131302552e2e12211e0605281e120d1e090c0c0c02
5509b8fff4b60d0d0255092b0fb8fff0b40f0f02550fb8ffe8b40b0b0255
0fb8ffe8b60d0d02550f1803b8fff0b41010025503b8fff0b40f0f025503
b8fff440190d0d02550324150c0b0b0255150c0c0c0255150c0d0d025515
2f2b2b2bcd2f2b2b2bcd2f2b2b2bcd2f2b2bcd003fed3fed12392f2bed39
3931301bb10602435458b71e090c0c0c065509b8fff4b60d0d0655092b0f
b8ffe4b40f0f06550fb8ffe4b60d0d06550f1803b8fff0b40f0f065503b8
fffc40220d0d06550324150c0c0c0655150c0d0d0655150c001b1e2e2e12
211e0605281e120d003fed3fed12392fed3939012f2b2bcd2f2b2bcd2f2b
2bcd2f2b2bcd31301b404d351601291649164926e60ce930050930017d00
7d017c047408710b720c750d7a178b008a018c048608810b840c860d8d17
cc11c613120c001e18000c1b1e2ea02e012e12211e0605281e120d1e4110
fff4000c000c01400056001efff2000b000b01400056001efff8000d000d
0140b6561e73bf09010941120267002bfff4000c000c01400056002bfff2
000b000b01400056002bfff8000d000d01404011562b730f40202334300f
01000f100f020fb80191b432180c0c0cb80140b456180e0b0bb80140b456
18080d0db80140b6561873b0030103b80267b3240c0c0cb80140b456240e
0b0bb80140b45624080d0db80140b356247315b8ffc0400e212334201540
1502159031c78b182b10f65d2bed2b2b2bf45ded2b2b2b10f45d712bed2b
2b2bf45ded2b2b2b003fed3fed12395d2fed393901111239393130b00243
b0405058b90022ffe0b21c201ab8ffe0b220202fb8ffe0b22d2026b8ffe0
b1292001383838383838383859015d7271007159591bb3000c1b2eb8032f
b56c1b1b061228b8032fb46c120d0621b8032fb26c060500183f2b3f2b11
392f2b393930315901262635343633321615140607161615140023220035
343613141633323635342623220603141616333236353426232206016a70
6ce6bfc0ea6b6d878dfef6d9d9fef69162866b6885896667883a49905381
a8ad827fa7031b29986aa0dadfa06697292cc488bcff000101c08fc10154
6884835f638784fcff4d904fa68082aaa8000000>OGDYIY+ArialMT AddT42Char 
OGDYIY+ArialMT /CharStrings get begin
/eight 8 def
end
OGDYIY+ArialMT /Encoding get
dup 56 /eight put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/OGDYIY+ArialMT*1 
[48{/.notdef}rp /zero /one /two /three /four /.notdef /six 
/.notdef /eight 27{/.notdef}rp /T 171{/.notdef}rp]
OGDYIY+ArialMT nf
OGDYIY+ArialMT*1 [11.0397 0 0 -11.0397 0 0 ]msf
748.293 120.773 mo
(T48)
[6.73419 6.13806 0 ]xsh
.778347 .36994 .0740673 .000823987 cmyk
%ADOBeginSubsetFont: GAAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal OGDYIY+ArialMT gcheck setglobal} if
1 4720 9 <00010055ffe7042105a6001e0207b0852b58b3130c0c0cb80140b456120c
0c0cb80140b456130c0b0bb80140b456120c0b0bb80140b456130c0d0db8
0140b456120c0d0db901400056b10202435458b90001ffc0400d0d0d0255
011c0e0a1e15151c12b802bb400b0f04041e1c0d0e01000718b8ffeab40f
0f025518b8ffeab40d0d0255182f2b2bcd2fcd2f003fed3fed12392ffdc4
10c42b31301b4034120c0d0d06550f0c0d0d06554b1a791d8a1d9613a713
c30cd60cdb1b080913180e2a1a03130a15121313ca0e0f140e13140e0f0d
b802a440130e0a1e15400ea00e020e0e0f40150115151c12b802bbb70f04
01d340000100b801184011041e1c0d115f106f107f108f10041080074110
fff4000c000c014000560007fff2000b000b014000560007fff8000d000d
014040115607731840212334301801001810180218b8fff4b70d0d065518
902012bc0135000f0195000d0138b20eb501ba01380000ffc0400b212334
200040000200901fb80192b18b182b10f65d2bedf4edf4ed10f62b5d712b
ed2b2b2bf45d3c003fedfd5de43fed12392f5d11392f5d10ed10e487082e
2b057d10c4001112393130b00243b0405058b4093005300bbaffe00003ff
e001383838385901715d2b2b592b2b2b2b2b2b1b400c00001c0d130e0e0d
0d04150ab8032fb56c15150f1c04b8032fb46c1c0d0f12b80333b26c0f04
00183f2b3f2b11392f2b11392f3311331112392f30315913371616333236
35342623220607271321152103363332001514070623222655bd15996c82
b4ad8c578c28a98e02d9fdb74f8491c00108748df4c8fd0180108a8bc4a2
9ab24f3f1602f1acfe765cfef6d1c791b2e00000>OGDYIY+ArialMT AddT42Char 
OGDYIY+ArialMT /CharStrings get begin
/five 9 def
end
OGDYIY+ArialMT /Encoding get
dup 53 /five put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/OGDYIY+ArialMT*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/.notdef /eight 27{/.notdef}rp /T 171{/.notdef}rp]
OGDYIY+ArialMT nf
OGDYIY+ArialMT*1 [11.0397 0 0 -11.0397 0 0 ]msf
748.711 185.262 mo
(T58)
[6.73419 6.13806 0 ]xsh
.753658 .797055 .0132753 .000610361 cmyk
%ADOBeginSubsetFont: GAAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal OGDYIY+ArialMT gcheck setglobal} if
1 5340 10 <00020055ffe7041905c0001e002a025ab0852b58b10602435458b70b1f18
0100251118b8fff6b40f0f065518b8fff4b40d0d065518b8fff040280c0c
065518110c0d0d065511100c0c06551118112c2b0b281e0f0e1f0e4f0e03
0e0e140050010101b8ffc0400d1011065501041e1c0d221e1405003fed3f
edc42b5d3212392f5ded3201111239392f2b2b2f2b2b2b10cdd4cd10ddc5
31301bb10202435458b70b1f180100251118b8ffeab40f0f025518b8ffea
402a0d0d025518110c0c0c02551118112c2b0b281e0f0e1f0e4f0e030e0e
140050010101041e1c0d221e1405003fed3fedc45d3212392f5ded320111
1239392f2b2f2b2b10cdd4cd10ddc531301b40473a1a4c1640235b165723
66036c166d1a67237a1a7d1e8c1a8b1e9a16a91abc1aea16e620f620133d
169e16ad16033a29640602281e4f0e5f0e020e0e1c221e140501d3500001
00b80268b4041e1c0d1f4127fff4000c000c01400056001ffff2000b000b
01400056001ffff8000d000d01400056001f0139000bfff4000c000c0140
0056000bfff6000b000b01400056000bfff8000d000d01400056000b0138
40111840212334301801001810180218902c01b80138b500b5250c0c0cb8
0140b456250e0b0bb80140b45625080d0db80140b356257311b8ffc0400e
212334201140110211902bc78b182b10f65d2bed2b2b2bf4ed10f65d712b
ed2b2b2bed2b2b2b003fedfd5de43fed12392f5ded3130b00243b0405058
bb0027ffe00023ffe0b321200620013838383859005d71015d59591bb501
01040b0e28b8032fb56c0e0e141c04b8032fb46c1c0d1422b8032fb26c14
0500183f2b3f2b11392f2b3212392f3031591337161633323e0235342706
062322023534003332161211100206232226013426232206151416333236
70ad167c61537d50360136bb6db6fc0107c68fed7b7af1a2acda02cba574
78b2a97c7da10153107a6e4c7fd8700c18566b0108d8df01109afee3fef2
fee7feb3aebf03349bb6c49c8cafaf00>OGDYIY+ArialMT AddT42Char 
OGDYIY+ArialMT /CharStrings get begin
/nine 10 def
end
OGDYIY+ArialMT /Encoding get
dup 57 /nine put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/OGDYIY+ArialMT*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/.notdef /eight /nine 26{/.notdef}rp /T 171{/.notdef}rp]
OGDYIY+ArialMT nf
OGDYIY+ArialMT*1 [11.0397 0 0 -11.0397 0 0 ]msf
755.012 135.91 mo
(T59)
[6.73419 6.13806 0 ]xsh
137.23 216.355 mo
82.219 214.488 li
.273228 1 .618616 .191989 cmyk
@
OGDYIY+ArialMT*1 [11.0397 0 0 -11.0397 0 0 ]msf
139.031 220.32 mo
(T2)
[6.73421 0 ]xsh
.108858 .909636 .654292 .0150454 cmyk
OGDYIY+ArialMT*1 [11.0397 0 0 -11.0397 0 0 ]msf
87.1016 220.238 mo
(T6)
[6.73421 0 ]xsh
110.883 209.16 mo
82.219 212.77 li
.194034 .858488 0 0 cmyk
@
OGDYIY+ArialMT*1 [11.0397 0 0 -11.0397 0 0 ]msf
112.68 212.691 mo
(T16)
[6.73421 6.13805 0 ]xsh
110.652 190.875 mo
82.219 188.586 li
0 .369329 .695216 0 cmyk
@
OGDYIY+ArialMT*1 [11.0397 0 0 -11.0397 0 0 ]msf
112.449 194.926 mo
(T32)
[6.73421 6.13805 0 ]xsh
1 .829374 .351232 .255924 cmyk
OGDYIY+ArialMT*1 [11.0397 0 0 -11.0397 0 0 ]msf
58.4648 183.703 mo
(T40)
[6.73421 6.13805 0 ]xsh
70.477 169.262 mo
82.219 175.281 li
.250797 .411353 1 .0362249 cmyk
@
OGDYIY+ArialMT*1 [11.0397 0 0 -11.0397 0 0 ]msf
59.2656 167.465 mo
(T41)
[6.73421 6.13805 0 ]xsh
.33933 0 .45771 0 cmyk
OGDYIY+ArialMT*1 [11.0397 0 0 -11.0397 0 0 ]msf
86.1523 180.391 mo
(T44)
[6.73421 6.13805 0 ]xsh
.589471 .00949111 .444343 0 cmyk
OGDYIY+ArialMT*1 [11.0397 0 0 -11.0397 0 0 ]msf
54.5859 220.09 mo
(T48)
[6.7342 6.13806 0 ]xsh
.778347 .36994 .0740673 .000823987 cmyk
OGDYIY+ArialMT*1 [11.0397 0 0 -11.0397 0 0 ]msf
53.4023 198.832 mo
(T58)
[6.7342 6.13806 0 ]xsh
.753658 .797055 .0132753 .000610361 cmyk
OGDYIY+ArialMT*1 [11.0397 0 0 -11.0397 0 0 ]msf
85.9883 205.07 mo
(T59)
[6.73421 6.13805 0 ]xsh
gsave
49.098 17.93 mo
777.828 17.93 li
777.828 223.93 li
49.098 223.93 li
cp
clp
49.098 17.926 mo
777.828 17.926 li
777.828 223.926 li
49.098 223.926 li
cp
.696254 .631098 .620691 .585718 cmyk
@
grestore
.653895 .581659 .568902 .37409 cmyk
%ADOBeginSubsetFont: GAAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal OGDYIY+ArialMT gcheck setglobal} if
1 6076 11 <000100ba0000018700cd00030037b0852b584018023c000a023c5f006f00
7f00af0004a0000100a004a198182b10f65d5ded003fed31301bb3014000
0800183f1acd30315933353315bacdcdcd000000>OGDYIY+ArialMT AddT42Char 
OGDYIY+ArialMT /CharStrings get begin
/period 11 def
end
OGDYIY+ArialMT /Encoding get
dup 46 /period put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/OGDYIY+ArialMT*1 
[46{/.notdef}rp /period /.notdef /zero /one /two /three /four 
/five /six /.notdef /eight /nine 26{/.notdef}rp /T 171{/.notdef}rp]
OGDYIY+ArialMT nf
OGDYIY+ArialMT*1 [8.8 0 0 -8.8 0 0 ]msf
27.0352 198.773 mo
(0.01)
[4.8928 2.43754 4.8928 0 ]xsh
27.0352 156.617 mo
(0.02)
[4.8928 2.43754 4.8928 0 ]xsh
27.0352 114.461 mo
(0.03)
[4.8928 2.43754 4.8928 0 ]xsh
27.0352 72.3047 mo
(0.04)
[4.8928 2.43754 4.8928 0 ]xsh
27.0352 30.1523 mo
(0.05)
[4.8928 2.43754 4.8928 0 ]xsh
0 lc
46.355 195.621 mo
49.098 195.621 li
.696254 .631098 .620691 .585718 cmyk
@
46.355 153.469 mo
49.098 153.469 li
@
46.355 111.313 mo
49.098 111.313 li
@
46.355 69.156 mo
49.098 69.156 li
@
46.355 27 mo
49.098 27 li
@
82.219 226.668 mo
82.219 223.926 li
@
271.5 226.668 mo
271.5 223.926 li
@
460.781 226.668 mo
460.781 223.926 li
@
650.063 226.668 mo
650.063 223.926 li
@
.653895 .581659 .568902 .37409 cmyk
OGDYIY+ArialMT*1 [8.8 0 0 -8.8 0 0 ]msf
72.4297 235.16 mo
(1980)
[4.8928 4.8928 4.89279 0 ]xsh
261.711 235.16 mo
(1990)
[4.89279 4.89279 4.89282 0 ]xsh
450.992 235.16 mo
(2000)
[4.89279 4.89279 4.89282 0 ]xsh
640.273 235.16 mo
(2010)
[4.89282 4.89276 4.89282 0 ]xsh
.750179 .679652 .670192 .901488 cmyk
%ADOBeginSubsetFont: GAAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal OGDYIY+ArialMT gcheck setglobal} if

1 0 20 <> OGDYIY+ArialMT AddT42Char 
1 11188 21 <0002009e000004fd05ba000d0018012eb0852b58401e65116b14024b104b
145b105b14040b0c1e0f0e0e0017181e0201020008124110fffe000c000c
014000560012fff2000b000b014000560012fff8000d000d0140b3561226
08bbfff6000d000d0140400e56080a0d0d025508100b0b065508b8fff440
120c0c0655081a201a01201a011a180d020c0cb80140b4560d0e0b0bb801
40b4560d0a0c0db80140400e560d200120000100201010025500b8fff6b4
0f0f025500b8fff6b40d0d025500b8fffa400b0c0c0255000c0b0b065500
b8fffab40c0c065500b8fff0400a0d0d0655005d193b5c182b10f62b2b2b
2b2b2b2b5d3cfd2b2b2b3c4e10715df62b2b2b2b4ded2b2b2b003f3f3cfd
3c12392f3cfd3c3130015d005d1bb10e0cb80333b76c0e0e0100080118b8
0333b26c010200183f2b3f12392f2b30315933112132171e021514022121
1111213236353426272623219e0229924d6c9259eefec9fe88017bbc9e5d
4c3184fe8905ba0e1265b66dbbfefdfdac03018c7f5c83150d000000>OGDYIY+ArialMT AddT42Char 
1 6156 12 <000100060000054605ba000c0260b0852b58b30b050d0db80140b4560c05
0d0d410d014000560001fffb000d000d014000560000fffb000d000d0140
b4560b060c0cb80140b4560c060c0c410d014000560001fffa000c000c01
4000560000fffa000c000c0140b45604040b0b4113014000560007fffc00
0b000b014000560008fffa000b000b014000560009fff2000b000b0140b4
56030f0b0bb80140b4560b070b0bb80140b4560c070b0b410d0140005600
01fff9000b000b014000560000fff9000b000b0140b75608093a03043b09
b8ffe7b312173408b8ffe7400e1217340419121734031912173409b8ffd8
b318213408b8ffd8403b182134042818213412260429082a0a2f0e046801
6806680bde060405040303060807090606090603090a0c10025509200a0b
140a0a0b0603060903b8fff640160c1002550320020114020201060c0b06
01030200010bb8021940090a0a0903020200080eb8021840090c0952400a
800a020ab801b5400d0b0b0c200003524f028f020202b801b54009010100
141010025500b8fff6400b0f0f0255000c0d0d025500b8ffe2b40c0c0255
00b80218b60d0ec22160a8182b2bf62b2b2b2b3c10f45ded10fd3c10f45d
ed10e6003f3f3c3c3c10f43c11121739011239872e2b2b087d10c405872e
182b2b087d10c4870ec4c487100ec4c44bb017534bb01c515ab00243b040
505a58b4080c090c04bafff40003fff40138383838593130005d015d435c
584009092219390822193904b8ffdeb119392b2b2b592b2b2b2b2b2b2b2b
2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b1bb2010b06b80332400a6c
0b0b0200080902020200183f3f3f12392f2b333031592111013301161736
3701330111023bfdcbec01215045425e011ce2fdb7026d034dfe467c7c73
9001affcb3fd9300>OGDYIY+ArialMT AddT42Char 
1 7468 14 <0002004affe8041c043e002800370322b0852b58402c090d092a190d1a2a
290d2a2a390d3615371b3a2a492a5d0d5d2a6a0d692a60308a0d86299a16
9b1aa90d1528b8ffe8b40b0b065527b8ffe840190b0b0655a619aa28b619
bb28c419cf28d215dd28084416011eb8fff440110c0c065512120c0c0655
050c0c0c065535b8ffe0404f0c0c06551f171f182b2c2a343904392c4904
482c5608592b6608692b760c870cc90cf90df92b1137340e0104102f2434
17322114185f296f2902291c2f0e3f0e8f0e9f0eff0e059f0eaf0eef0e03
0ebbfffa000b000b0140b7560e0c0f0f02550eb8ffeab4101002550eb8ff
f44014101006550e0c0d0d06550e060f0f06550e260d0db80140b4560e18
0c0cb80140b5560e0e1c0317b802aab3182c0b0bb80140400e56182c0a0a
42551895141c1c0700b8fff440110c0c06550045270a321c030b29611061
004110fff6000b000b014000560000fff8000c000c014000560000fffc00
0d000d0140400b5600060d0d025500252124b8ffecb41010025524b8ffec
400b0d0d025524040c0c025524b8ffe4b40b0b025524b8fff4b40b0b0655
24b8ffdc400b1010065524060f0f065524b8fffcb40c0c065524b8025b40
0e27400026102620263026af260539b8ffc0b40e0e025526b8ffd6b40e0e
025526bbfff4000d000d0140b356263139b8ffc0400d1e23343039c03902
a039013917b8fff4b71010065517080c0cb80140400956172518222f080d
0db80140b4562f0c0c0cb80140b4562f0e0b0bb801404011562f24bf06cf
06021f063f060206140b0bb80140b45606140d0db80140b45606080c0cb8
0140402e56060e0f0f0255060c0d0d025506180c0c0255060c0b0b025506
0c0b0b0655060e0d0d065506100c0c065506313810f62b2b2b2b2b2b2b2b
2b2b5d71ed2b2b2bf4ed2b2b105d712bf62b2b2b5dedf42b2b2b2b2b2b2b
2b3cfd2b2b2b2be5e5003fed3fe42b3fedfd2b2be41112392f2b2b2b2b2b
2b2b2b5d71ed711112391112393901111217393130005d2b2b2b2b01715d
2b2b00711bb700032b2b0c0c0e29b8032db76c0e0e1c270a0332b8032db7
6c030b1817171c14b8032fb26c1c0700183f2b322f333f2b3f11392f2b39
113311123930315925060623222635343636373637363736353427262322
0607273e02333216161716151514161723260306070e0215141633323637
3635033c64b96aafbc477348356bda67013345887f791db0186ed08988aa
5010091722bc1c1762c46f5c326d6968a2261d835546ab854e814e140e0d
1a24250a6e2d3d597118718b4b40614a2e78f0fb853d3801dd281c10284d
2f48605b4f3d7700>OGDYIY+ArialMT AddT42Char 
1 10488 19 <00010050ffe803ed043e001a0261b0852b58bc0017fff0000c000c0140b4
560a080c0cb80140b45609080c0cb80140b4560f080c0cb80140b4561008
0c0cb80140b45611080c0cb901400056b1020243545840340e7f0f010f0b
01400050007000030004121c0b07181c040b010e1507080e0e0255070c0d
0d0255070c0c0c025507100b0b0255072f2b2b2b2bcdd4c6003fed3fed10
c45d3210c45d3231301b4047090c011f1c4313431753135317601360179b
029b039a0da410a41a0c080d190a6a0269036a05750c700d800da60cb509
b60ab50c0c160c860ce302030e225f0f6f0f7f0f030f01b802aa40263000
40005000600070009000a000e000f00009000f0f0b000004121c0b07181c
040b1c0f010f410afff4000c000c01400056000ffff2000b000b0140400f
560f240e080d0d06550e221b000100410afff4000c000c014000560000ff
ee000b000b0140400f5600240b2b1f010100010101400e2bb80140b45601
400d0db80140b45601400c0cb80140b45601360b0bb8014040205601400b
0b065501401010065501480c0c0655011a0d0d065501491c15080d0db801
40b456150c0c0cb80140b456150e0b0bb801404021561524cf07011f073f
0702070e0b0b0655070a1010065507120c0c0655070c0d0db80140b45607
0c0c0cb80140b65607311b34c4182b10f62b2b2b2b2b5d71ed2b2b2b10f6
2b2b2b2b2b2b2b2b5d724b53234b515a58b90001ffc03859ed2b2b72f42b
ed2b2b72003fed3fed12392f11392f105de4105de43130005d71015d7159
012b2b2b2b2b2b1b400a010000120e0f0f120418b8032fb46c040b0b12b8
032fb26c0b0700183f2b3f2b11392f3311392f3330315901170606232200
1134123633321617072626232206151416333236033cb11defaedafef772
e989addc1faf197f5a88aaa4846a8e018517b7cf011d010aac010281afa1
1b6b6cc3d3d6c2820000>OGDYIY+ArialMT AddT42Char 
1 6824 13 <0002004bffe8041e043e0015001d0216b0852b5840171f001c150255035d
055d09550b65036b056f09650b0815b8ffe4b40d0d065511b8ffe440520d
0d06551d1c0d0d06552712d905fa14f61a0431123a19311c41124d1a411c
51125c19521c61126d1a611c78067815f602f618100016010f0d17175016
6016701603161c0f9010a010021010041b1c0a0700ba02aa0001ffc0b410
10025501b8ffc0400e101006551001010195131c040b174110fff0000c00
0c014000560017fff2000b000b014000560017fff8000d000d0140b35617
400db8ffdcb40d0d02550db8ffeeb40d0d06550db8ffeab40c0c06550db8
ffc04009272a34b00d010d1a1fb8ffc0b32526341fb8ffc0b71e2334301f
011f16bbfffc000d000d0140b656163310080c0cb80140b456100e0b0bb8
0140b45610080d0db8014040135610240740242a341f073f074f0703070c
0c0cb80140b456070c0d0db80140402b5607200b0b025507180c0c025507
1c0d0d0255070e0b0b0655071c0c0c065507160d0d065507191e3437182b
4e10f42b2b2b2b2b2b2b2b5d2b4dfd2b2b2be42b4e10712b2bf6712b2b2b
2b4ded2b2b2b003fedfd5d2b2be43fed12392f5d3cfd713c011112393912
393130015d005d2b2b2b0171721b401d0000500070008000900005300070
0080009000c000d000060000041016b8032f400d6c100010301002130310
0a0413b8032fb46c040b0a1bb8032fb26c0a0700183f2b3f2b12395f5e5d
2f2b11332f5d713031590117060623220011100033320011140721161633
32360121262726232206035eba2ceeb9e9feef0114dcd5010e01fce80ab2
85638cfdda02510c3856897ca9015617a3b4011f0103010c0128fedefef9
1020afba680195864368a6000000>OGDYIY+ArialMT AddT42Char 
1 9928 18 <000200880000013c05ba00030007020ab0852b58b3020a0b0bb80140b456
030a0b0bb80140b456060a0b0bb80140b456070a0b0b4119014000560001
fffc000b000b014000560000fffc000b000b014000560005fffc000b000b
014000560004fffc000b000b0140b456020b0c0cb80140b456030b0c0cb8
0140b456060b0c0cb80140b456070b0c0c4119014000560001fffd000c00
0c014000560000fffd000c000c014000560005fffd000c000c0140005600
04fffd000c000c0140b45602040d0db80140b45603040d0db80140b45606
040d0db80140b45607040d0d4119014000560001fffc000d000d01400056
0000fffc000d000d014000560005fffc000d000d014000560004fffc000d
000d014040375609360b0b02554f099009a009b009c009df09f009070009
1f09700980099f09b009c009df09e009ff090a1f09010001070402030906
03bbffc0000d000d0140402a56037e0100060506040a0607250500049f04
a004b004c004e00406c004f0040200042004d004e0040404b8fff8b41010
025504b8fffa40170e0e025504040c0c0255040a0b0b025504140b0b0655
04b8ffeab41010065504b8fffeb40d0d065504b8fffc400a0c0c0655044e
084750182b10f62b2b2b2b2b2b2b2b5d71723cfd3c003f3f3c3fed2b0111
123939111239393130015d72712b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b1bb7040a05060040010000183f1acd3f3f3031591335
33150311331188b4b4b404ebcfcffb150426fbda>OGDYIY+ArialMT AddT42Char 
1 12240 23 <000100830000013705ba00030181b0852b58b3020a0b0bb80140b456030a
0b0b410d014000560001fffc000b000b014000560000fffc000b000b0140
b456020b0c0cb80140b456030b0c0c410d014000560001fffd000c000c01
4000560000fffd000c000c0140b45602040d0db80140b45603040d0d410d
014000560001fffc000d000d014000560000fffc000d000d0140b7560536
0b0b025505b8ffc0b337383405b8ffc0b334353405b8ffc0b330313405b8
ffc0b322253405b8ffc040251517340f051f059f05df05044f05df05f005
031f0570058005ff05040100000a0203250100b8ffc0b337383400b8ffc0
40153335349f0001c000f0000200002000d000e0000400b8fff8b4101002
5500b8fffa401d0e0e025500040c0c0255000a0b0b025500140b0b065500
081010065500b8fffeb40d0d065500b8ffffb40c0c065500b8fffc400a0c
0c0655004e044750182b10f62b2b2b2b2b2b2b2b2b5d71722b2b3cfd3c00
3f3f3130015d71722b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b1bb3000a
010000183f3f3031593311331183b405bafa46000000>OGDYIY+ArialMT AddT42Char 
1 12652 24 <00010087000003e6043e001601e6b0852b5840130503061302a810b810e3
03e713f003f6130604b8fff040220b0d347910019810d018e018ff180420
08140e1416121c05070106160d0a0d0e0c0e4110fff8000d000d01400056
000efff2000b000b01400056000efff4000c000c0140401c560e24184010
10025518400b0b02550b28101002550b140e0e02550bb8ffec40110d0d02
550b040c0c02550b220b0b02550bb8fff4400b0b0b06550b14101006550b
b8fff9400b0d0d06550b0a0f0f06550bb8fff640120c0c06550b40333634
ff0b01ff0b010b4e18b8ffc0401a343634b018f018027018a018b018c018
04180302331516080d0db80140b456160e0b0bb80140b456160c0c0cb801
40b45616250100b8fff6b41111025500b8fffab41010025500b8fffa4017
0e0e025500040c0c0255000a0b0b025500040b0b065500b8fffa40110f0f
065500020c0c065500040d0d065500b8ffc04012333634f0000100002000
d000e00004004e1710f65d712b2b2b2b2b2b2b2b2b2b3cfd2b2b2b3cf43c
105d712bf65d712b2b2b2b2b2b2b2b2b2b2b2b2bed2b2b2b3c103c003f3c
3f3fed11390112393130437940160611090a080a070a0306102611060e1b
010f0a121b01002b012b2b2a81015d71002b5d711b40090d0a160a010603
0512b80330b26c050700183f2b323f3f3f30315933113315363332161617
1615112311342626232206151187a275dd60a150100ab42a6b4873a70426
97af45704d327dfd7302866e6d4192ccfdbc0000>OGDYIY+ArialMT AddT42Char 
1 8760 16 <00020044ffe80427043e000d001901ffb0852b58b615180d0d065513b8ff
e8b40d0d06550fb8ffe840650d0d065519180d0d065512070a190c470648
0856065908670669080834103a123a16351845104b124b1645185c055c09
52105d125d1652186d056d0964106d126d1664187701150906050d5b0354
05540a5b0c6c036505650a6c0c0a171c0407111c0b0b144110fff2000b00
0b014000560014fff4000c000c014000560014fff8000d000d0140401056
14241b400d0d02551b400b0b025507b8ffea40110f0f025507180d0d0255
07100b0b025507b8fff0b40b0b065507b8fff0b40d0d065507b8fff0b40f
0f065507b8fff0b40c0c065507b8ffc0400e242534300701000710072007
0307bbfff4000d000d0140b6560731df1b011bb8ffc0400b1e2334301b01
1b0e080d0db80140b4560e0c0c0cb80140b4560e0e0b0bb801404041560e
24000c0e0f025500120d0d0255000c0c0c0255001c0b0b0255000e0b0b06
55000e0d0d0655000c1010065500160c0c065500402425341f003f000200
0c0d0db80140b456000c0c0cb80140b456000c0b0bb80140b65600311a34
37182b10f62b2b2b5d2b2b2b2b2b2b2b2b2bed2b2b2b10712b5df62b5d5d
2b2b2b2b2b2b2b2b2b2bed2b2b2b003fed3fed313001715d0071435c5840
09530553096205620904015d59002b2b2b2b1bb10b11b8032fb46c0b0b04
17b8032fb26c040700183f2b3f2b30315913103736333200151406062322
0013141633323635342623220644a489c5db01167beb8bdffeedb9b28786
b2b38587b2021301278e76fee1fdcdeb82011e010dcccbccd1c5cbca0000
>OGDYIY+ArialMT AddT42Char 
1 9360 17 <00020087fe690421043e0012001e01d5b0852b5840740c102d103d104b10
043f20b020021f20290c231d3215321d421d70209020083a173a1b4a174a
1b59085b0c5c175c1b6a086b0c69106d176b1bc020d314dd18dd1ad31ee4
14e41ee020ff201623042b102b1535043a1046044a105a10e50beb1dfe10
0b110e03161c1c06070106161c0e0b000e194110fff2000b000b01400056
0019fff4000c000c014000560019fff8000d000d0140401c561924d00a01
100a400a600a800a0420400b0b025520400d0d02550ab8ffe6400b0f0f02
550a180d0d02550ab8fffab40c0c02550ab8ffeeb40b0b06550ab8fff4b4
0f0f06550ab8ffe8400f0c0c06550a74011333023312080d0db80140b456
120e0b0bb80140b456120c0c0cb8014040195612250000c001019001a001
b001f001041f013f014f010301b8fffc401d0e0e025501100d0d02550110
0c0c025501100b0b0255010c0b0b065501b8fff6b41010065501b8fffc40
160f0f0655010c0c0c065501120d0d065501191f473718012b4e10f42b2b
2b2b2b2b2b2b2b5d71723c4d10fd2b2b2bf4e410fd2b2b2b2b2b2b2b2b5d
71ed2b2b2b003f3fed3f3fed113912393130005d015d717200711bb4000e
110e16b8032fb76c0e0b010603061cb8032db26c060700183f2b323f3f2b
393f30315913113315363633321616151402062322262711031416333236
35342623220687a43a926888d06a75df7b5a8f2e11a67678aba77473b1fe
6905bd8a51518cff98a3fefb8b4c3afdfb03a4cdc4cbd5cbcad70000>OGDYIY+ArialMT AddT42Char 
1 8436 15 <00010085000002c6043e00110107b0852b58403b2f130110040123043404
4304530466047404060911080908090d1311090d000308010b1c06070106
000a09289008010822201301130222110e0b0bb80140b45611080d0db801
40b456110c0c0cb80140b45611250100b8ffc04010333634f00001000020
00d000e0000400b8fff8b41010025500b8fff840110e0e025500040c0c02
5500060b0b025500b8fffcb41010065500b8fff440160f0f065500060c0c
065500080d0d0655004e1247c4182b10f62b2b2b2b2b2b2b2b5d712b3cfd
2b2b2be4105df472e4003f3f3fed11393911393901111239390010c9870e
7dc43130005d72015d1bb7000a01060903060bb80336b26c060700183f2b
32323f3f30315933113315363633321707262322060706151185a23e693f
5b5e3e42423b5e141e0426a171483aa727473f6072fdd400>OGDYIY+ArialMT AddT42Char 
1 11576 22 <0001001a000003e80426000a0263b0852b58bc0008fff2000b000b0140b4
56020e0b0b410d014000560000ffea000d000d014000560008ffea000d00
0d0140b45602160d0d410d014000560000fff4000c000c014000560008ff
f0000c000c0140b45602100c0cb901400056b1020243545840170508000a
080601060a0005090805010205240f0f0255052f2bddcd10ddcd11333300
3f3f3f123931301bb7350501002211390ab8ffde400d11390916121c3408
16121c3402b8ffeab3121c3401b8ffeab3121c340ab8ffd840091e213400
281e21340ab8ffe8400922253400162225340ab8ffda407e282e34002028
2e340f0c29002809260a3900350a4800470a560156025908580966016602
6908690978007701770279087809770a870187028603890788088a099d00
9809910aac00a20abd00b707b10ac900c50ada00d50aec00e30afb00f40a
2c0a00050a1800160a2800260a370a4f00400a09054012163405400b0d34
b10602435458400905010008060106000ab8fff4400f0d0d06550a000c0d
0d065500050908b8fff440120d0d0655080501020c0d0d06550205050c0b
1112392fdd2bcd10dd2bcd10cd2bcd2b002f3f3f11123931301b40370a07
080825090a1409090a0003020225010014010100050a0a000a0908080202
0106070a09030001052f0c010c22084040400980090209b8011bb5400580
050205b8011b400920024001220bead2182b10f6ed1a19fd5dfd5d1a18ed
e45d11123939123939003f3c103c103c3f3c113987052e2b877dc4872e18
2b877dc4593130002b2b01715d2b2b2b2b2b2b2b2b2b2b2b2b005d59012b
2b2b2b2b2b2b2b1bb605000a0806010600183f3f3f333031592101331316
17363713330101aefe6cbee4251f182becb9fe6e0426fd84676f54760288
fbda0000>OGDYIY+ArialMT AddT42Char 
OGDYIY+ArialMT /CharStrings get begin
/space 20 def
/P 21 def
/Y 12 def
/a 14 def
/c 19 def
/e 13 def
/i 18 def
/l 23 def
/n 24 def
/o 16 def
/p 17 def
/r 15 def
/v 22 def
end
OGDYIY+ArialMT /Encoding get
dup 32 /space put
dup 80 /P put
dup 89 /Y put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 118 /v put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/OGDYIY+ArialMT*1 
[32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two 
/three /four /five /six /.notdef /eight /nine 22{/.notdef}rp 
/P 3{/.notdef}rp /T 4{/.notdef}rp /Y 7{/.notdef}rp /a /.notdef 
/c /.notdef /e 3{/.notdef}rp /i 2{/.notdef}rp /l /.notdef 
/n /o /p /.notdef /r 3{/.notdef}rp /v 137{/.notdef}rp]
OGDYIY+ArialMT nf
OGDYIY+ArialMT*1 [11 0 0 -11 0 0 ]msf
401.844 247.273 mo
(Year)
[7.32599 6.11603 6.11597 0 ]xsh
OGDYIY+ArialMT*1 [0 -11 -11 0 0 0 ]msf
22.0469 163.422 mo
(Topic Prevalence)
[-6.71001 -6.116 -6.116 -2.442 -5.5 -3.04692 -7.326 -3.66292 -6.116 -5.5 -6.116 -2.442 
-6.116 -6.116 -5.5 0 ]ysh
158.133 260.48 mo
668.785 260.48 li
668.785 306 li
158.133 306 li
cp
0 0 0 0 cmyk
f
169.094 265.961 mo
186.375 265.961 li
186.375 283.242 li
169.094 283.242 li
cp
f
170.82 274.602 mo
184.645 274.602 li
.273228 1 .618616 .191989 cmyk
@
169.094 283.238 mo
186.375 283.238 li
186.375 300.519 li
169.094 300.519 li
cp
0 0 0 0 cmyk
f
170.82 291.879 mo
184.645 291.879 li
.108858 .909636 .654292 .0150454 cmyk
@
245.332 265.961 mo
262.613 265.961 li
262.613 283.242 li
245.332 283.242 li
cp
0 0 0 0 cmyk
f
247.059 274.602 mo
260.883 274.602 li
.194034 .858488 0 0 cmyk
@
245.332 283.238 mo
262.613 283.238 li
262.613 300.519 li
245.332 300.519 li
cp
0 0 0 0 cmyk
f
247.059 291.879 mo
260.883 291.879 li
0 .369329 .695216 0 cmyk
@
322.32 265.961 mo
339.601 265.961 li
339.601 283.242 li
322.32 283.242 li
cp
0 0 0 0 cmyk
f
324.051 274.602 mo
337.875 274.602 li
1 .829374 .351232 .255924 cmyk
@
322.32 283.238 mo
339.601 283.238 li
339.601 300.519 li
322.32 300.519 li
cp
0 0 0 0 cmyk
f
324.051 291.879 mo
337.875 291.879 li
.250797 .411353 1 .0362249 cmyk
@
444.309 265.961 mo
461.59 265.961 li
461.59 283.242 li
444.309 283.242 li
cp
0 0 0 0 cmyk
f
446.039 274.602 mo
459.863 274.602 li
.33933 0 .45771 0 cmyk
@
444.309 283.238 mo
461.59 283.238 li
461.59 300.519 li
444.309 300.519 li
cp
0 0 0 0 cmyk
f
446.039 291.879 mo
459.863 291.879 li
.589471 .00949111 .444343 0 cmyk
@
543.801 265.961 mo
561.082 265.961 li
561.082 283.242 li
543.801 283.242 li
cp
0 0 0 0 cmyk
f
545.527 274.602 mo
559.352 274.602 li
.778347 .36994 .0740673 .000823987 cmyk
@
543.801 283.238 mo
561.082 283.238 li
561.082 300.519 li
543.801 300.519 li
cp
0 0 0 0 cmyk
f
545.527 291.879 mo
559.352 291.879 li
.753658 .797055 .0132753 .000610361 cmyk
@
.750179 .679652 .670192 .901488 cmyk
%ADOBeginSubsetFont: GAAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal OGDYIY+ArialMT gcheck setglobal} if
2 10532 46 <0001004101b8026a026d0003003db0852b58401970027003024d014d0202
012300021a05700001001904708d182b4e10e45d10e6002f4ded31300071
015d1bb200400100182f1acd3031591335211541022901b8b5b50000>OGDYIY+ArialMT AddT42Char 
2 3144 34 <000200b900000186042600030007004eb0852b5840200405000607090206
3c04033c0106040a023c2f003f000220000100a108a198182b10f45d71ed
003f3fed10ed011112393912393931301bb505040800400100182f1acd3f
cd3031591335331503353315b9cdcdcd0359cdcdfca7cdcd0000>OGDYIY+ArialMT AddT42Char 
2 7440 42 <0002fffd0000055905ba0007000e028ab0852b58411d0001fff8000c000c
01400056000afffc000c000c014000560009fff8000c000c014000560005
fff8000c000c014000560004fff8000c000c0140b45608080c0cb80140b4
5606040c0cb80140b45607080c0cbe014000560005fffa000b000b0140b4
5608060b0bbe014000560004fff4000b000b0140b456020c0b0bbe014000
560001fff4000b000b0140b456060a0b0bb80140b45607160b0bb80140b4
56000c0b0bb80140b4560b060c0cb80140b4560a0a0c0cb80140b456050a
0c0cb80140b456090e0c0cb80140b456060a0c0cb80140b456070e0c0cb8
0140b756010e0f10025502b8fff2b40f10025502b8fff8b40d0d065502b8
fff440590c0c0655090c0c0c0655050c0c0c06552f103010670868096010
88039010c905c606c010f0100b0805590156025010680bb010f30cf30df3
0e09040c040d040e030b0a090504040c0d0e080607070c09050408060c07
010000b8fff8400f0c0c02550020070c1407070c020303b8fff840150c0c
02550320040c1404040c091e0505081e060306b80270400900080ce94002
010202ba010b0001010b40120c2000650703525004cf04df040390040104
b80101400b500cc007df0c03900c010cb8010140100f07cf07027f078007
0207930fd6d7182b10f45d7119f45d71f45d7118ed10ed1a1910eded0018
3f3c1aed3fe43c10ed3c10ed87052e2b2b7d10c4872e182b2b7d10c40111
1239391139398710c4c40ec4c4870510c4c40ec4c43130014bb00b534bb0
1e515ab00243b040505a58b4040f030807bafff00000fff8383838385901
72715d2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b1bb10806b80331400c6c08080001040800080c010200183f333f3f1112
392f2b303159230133012303210313210326270607030233d10258ddabfd
9ba1d901f19946221c3305bafa4601bcfe44025a0196b9778d8b>OGDYIY+ArialMT AddT42Char 
2 5308 38 <00010066ffe7057605d3001d012fb0852b58b563026a1d0201b8ffe8b40b
0b065500b8ffe8405f0b0b06552000320d63007000741d8000841d90009a
05ab03a50db903b40dc70dd000e41df31d110e121d111d1d032a0628112a
1c201f470d56145715561968056b1d7b128b129a03990e9a1ca801a402a8
11d50e130014001a1014101a0402b8ffdeb2283901b8ffc040202839100f
0001041b131e0c031b1e040910260f4a0026200101011a1f17020c0cb801
40b456170e0b0bb80140b456170a0c0db80140400a561726200801080c0c
0db80140400d56080c0b0b065508191e635c182b4e10f42b2b5d4ded2b2b
2b4e10f65d4dedf4ed003fed3fed1117393130012b2b5d5d71005d2b2b01
721b400a010000040f10100c041bb80332b46c04090c13b80332b26c0c03
00183f2b3f2b12392f3311392f3330315901170604232224023534122433
320417072626232206021514121633323604b4c23dfec3e5edfed79baf01
43c2dc012c3bbf33c293a9e35c6de686a3e2020231effbc1016ed2e50155
b1e0cb2da092a2feef91bbfee98abc000000>OGDYIY+ArialMT AddT42Char 
2 5716 39 <0001006dffe705b905d3002501a7b0852b58401a1b141b15026027015e08
130112032424002112170225001e0201b8ffc040150c0c0655010106171e
0e03211e06090101262725244110fffe000c000c014000560024fff2000b
000b014000560024fff6000c000d0140400d562420030320022027600203
02b8ffe4b40f0f025502b8fff2b40d0d025502b8ffdab40c0c025502b8ff
f4400e0c0c06550272802701271d020c0cb80140b4561d0e0b0bb80140b4
561d0a0c0db80140400a561d26200a010a0c0c0db80140400d560a100c0c
06550a1926635b182b4e10f42b2b5d4ded2b2b2b4d105df62b2b2b2b5d3c
4d10fd2b2b2b3c1112392f003fed3fed12392f2b3cfd3c11123911123901
111239123931304379404404231b1c1a1c191c03060c26102515261f2608
2504262325180d1d2100160f1321011112141320071d210022052521011c
0b17210114111721011e092121002403212100002b2b2b2b012b2b103c10
3c2b2b2b2b2b2b2b2b2b2a81015d005d1bb703402424210e0100b80333b5
6c01010e0621b80332b76c06091213130e17b80332b26c0e0300183f2b32
2f333f2b11392f2b1112392f1acd30315901352511060423222402353412
243332041617072e02232206060706151412043332363711034c026d8ffe
d0a0d8fe9fb4b30150db9f01019226af2162b66f85c2772138870102917e
f03e023fac01fde07273b9015ed8d60173b467b8943070804d51844f889f
c4fef88061370111>OGDYIY+ArialMT AddT42Char 
2 11604 48 <000100a40000052205ba000b0146b0852b58b9000dffc040161315340403
1e090aa00ad00a020a0502020b080805084110fffe000c000c0140005600
08fff2000b000b014000560008fff6000c000d0140b5560820070706b8ff
eeb40f0f025506b8fff2400b0d0d025506100c0c025506b8ffe040150b0b
065506010c0c0655065d800d010d020b020c0cb80140b4560b0e0b0bb801
40b4560b0a0c0db80140b7560b200120000100b8ffc0400a131534002010
10025500b8fff6b40f0f025500b8fff6b40d0d025500b8fffa400b0c0c02
5500080b0b065500b8fff7b40c0c065500b8fff840160d0d0655005d0c20
0d01200d500d600d700d043b59182b5d7110f62b2b2b2b2b2b2b2b5d3cfd
2b2b2b3c105df62b2b2b2b2b3c10fd2b2b2b3c003f3c3f3c395d2f3cfd3c
3130012b1bb1030ab80333400d6c03030001080800080502010200183f3f
3f3f1112392f2b303159331133112111331123112111a4c202fac2c2fd06
05bafda6025afa4602b3fd4d>OGDYIY+ArialMT AddT42Char 
1 13212 25 <000100bf0000018105ba00030150b0852b58b302020c0cb80140b4560302
0c0cb80140b45602070b0bb80140b45603070b0b410d014000560001fff9
000b000b014000560000fff9000b000b0140b45602050c0db80140b45603
050c0d410d014000560001fffb000c000d014000560000fffb000c000d01
40b656010200080205b8ffc0b3383d3405b8ffc0b333343405b8ffc0b32d
303405b8ffc0b328293405b8ffc0b323253405b8ffc0b31d1e3405b8ffc0
b3181a3405b8ffc0402a0d103420059005af050303200100008f00a000b0
00042f0040005000df00f000051220008f0090000305b8ffc0400b0d0d02
5500181010025500b8ffecb40f0f025500b8ffeeb40d0d025500b8fff640
100c0c025500200b0b065500a204d659182b10f62b2b2b2b2b2b5d435c58
b2800001015d5971723cfd5d2b2b2b2b2b2b2b2b3c003f3f3130012b2b2b
2b2b2b2b2b2b2b1bb30008010200183f3f30315933113311bfc205bafa46
>OGDYIY+ArialMT AddT42Char 
2 1700 32 <000100980000060f05ba00100350b0852b58b3082a0b0db80140b456022a
0b0db901400056b10202435458b90008fff6400b0c0c0255080e0d110255
02b8ffeeb40d11025505b8ffee40280d1102550c120c0c0255050f0c0309
00010208090b0e000809020a0b06101002550b100d0d02550bb8fffab60c
0c02550b1000b8ffe6b41010025500b8fff8b40f0f025500b8fffcb40d0d
0255002f2b2b2bcd2f2b2b2bcd003f3fc0c010d0d0c0111217392b2b3130
012b2b2b001bb10602435458401f07200b0b065506200b0b065503200b0b
065504200b0b065505200b0b065508b8fff240230b0b0655020c0b0b0655
03060c0c0655020e0c0c0655090c0c0c06550a0c0c0c065507b8fff8b40d
0d065508b8fff8401f0d0d06552605010c200a12340f200a12340f050c03
00010e0b00080801020ab8ffeeb40b0b06550ab8ffeeb40c0c06550abb02
56001200100256400d000c0b0b065500060c0c065500b8fff8b40d0d0655
00012f2b2b2bf42ff42b2b003f3c3f3c3c111217392b2b5d3130012b2b2b
2b2b2b2b2b002b2b2b2b2b1b407f00020f0814021b0804760c860cc80c03
090c490c490f032904250d2c0e58035b04760d780e870d080b020508390d
360e4f024b03440740084d0d420e0a9802990396079608a803a707061202
0f0e0e30050214050502080c0d0d300508140505080c520f520140010202
0808090a0b0b0d0d0e0e1000080902601280120212ba02a8000d0131b205
2008b80131b50c090a0a0b0bb80140b4560a0a0c0cb801404009560a2040
0c7f0b010bba0256000e010bb2052002b8010bb20f0100410afff6000b00
0b014000560000fff6000c000c0140b75600200f70100110b80256b72005
600580050305b802a8b3113b59182b1910f45df45d3c18fd2b2b3c10ed1a
1910edf45d3c1a18fd2b2b3c10ed1a1910ede45d00183f3f3c3c103c103c
103c103c103c103c1a10eded87052e2b877dc4872e182b877dc43130004b
b00b534bb01e515a58bd000cfffb0008ffd60002ffd638383859014bb00c
534bb028515ab00243b040505a58b9000dfff8b10e0a38385901435c58b9
000dffd4b621390e2c21390db8ffd4b637390e3237390db8ffd4b52d390e
2c2d392b2b2b2b2b2b5972715d00715d015d5959002b2b1b400d0b080008
050e080c08020f010200183f333f333f333f3f3031593311210116173637
012111231101230111980124015b30161935015f0105bbfe56affe5805ba
fbf29148509b03fcfa4604cbfb3504e0fb200000>OGDYIY+ArialMT AddT42Char 
2 9356 44 <000200a1000005ad05ba00180022027fb0852b584021120b0e0112361c5a
1f66086d1f0409100d0d065508100d0d065507100d0d065524b8ffc0b40c
0c02550db8fff4b40c0c02550cb8fff4b40c0c02550bb8fff4b40c0c0255
12b8ffe2b3121a3412b8fff0b322273411b8ffe2b31d273410b8ffe2b31d
27340fb8ffe2b31d273412b8ffd8b31d263411b8ffe2b3121a3410b8ffe2
b3121a340fb8ffe24049121a34250e4a1c4a20530b5c1c6d1c7209780e79
0f850a880f970da90fb80fe80ee70f100e0c0c20110f1411110f110f0c09
121b02211a160a061211100d0c0518090916171a191e17beffc0000b000b
014000560017ffc040150b0b065517170021221e0201020018180f0f0e08
1e4110fffe000c000c01400056001efff2000b000b01400056001efff600
0c000d0140b5561e260e9c06b8ffe8b40f0f025506b8fff6b40d0d025506
b8ffe040190c0c025506060d0d0655065d20247024802403242218020c0c
b80140b456180e0b0bb80140b456180a0c0db80140400e56182001200001
00201010025500b8fff6b40f0f025500b8fff6b40d0d025500b8fffa400b
0c0c025500060b0b065500b8fff7b40c0c065500b8fff8400a0d0d065500
5d233ba8182b4e10f42b2b2b2b2b2b2b5d3c4dfd2b2b2b3c105df62b2b2b
2b19e418ed2b2b2b003f3c103c103c3f3cfd3c12392f2b2bfd3c103c392f
12173901111739870e2e2b057d10c43130015d2b2b2b2b2b2b2b2b2b2b2b
2b2b002b2b2b5d435c58400a08400f390f103a11123a2b2b2b590171435c
58b9000effde401a193911221939122219390e401c391022143910221f39
102215392b2b2b2b2b2b2b591bb2091917b80332400b6c191900010f0800
080122b80332b26c010200183f2b3f3f1112392f2b393031593311213216
1615140607161716171323032e02272623231111213236363534262321a1
028ac4cc7acad34d28554cfff4c2556e572d214be101a185964e97a3fe30
05ba4fc8799cd61d25244e75fe710131848c380b07fd7503333779476886
0000>OGDYIY+ArialMT AddT42Char 
2 4324 37 <0001005cffe704eb05d300300341b0852b5841110027fff8000d000d0140
00560026fff8000d000d014000560025fff8000d000d0140b45618100c0c
b80140b45619100c0cb80140b4561a100c0c411f01400056000dffe8000b
000b01400056000cffe8000b000b01400056000bffe8000b000b01400056
001cffe8000b000b01400056001bffe8000b000b0140b45603180b0bb801
40b45602180b0bb80140b45601180b0bb801404028566303630473037404
0425273503391c430349074c1d451f44244627530359075c1d572889130e
23b8fff2b41010025524b8fff2b41010025525b8fff2b41010025526b8ff
f2b41010025527b8fff2b41010025523b8fff6b40d10025524b8fff6b40d
10025525b8fff6b40d10025526b8fff6b40d10025527b8fff640460d1002
55280d26240224032725360f34234425452f5a20562355256c0b6a0d6b0e
66146518790b7a0d7a0f7d107524732586038a0b890d8a0f8d1085248325
920d960f96151eb10602435458402d2126121b261a09262901260000291a
120432312600650002000d2d791b891b021b25160d2d1e27250125051605
b8fff4400c0c0c0655051e2d091e1e1603003fed3fed2b1112395d111239
1112395d1112395d01111217392fed2fed2fed2fed1b402d25240e0d0b05
211c1d1e1b08070604030206012524220e0d0b06051e1b2d1a400c0c0255
8f1a011aed16002d01b8ffc040120c0c0255100120015001600170019001
0601b801b0400c2d1e20131342551e1e160305b8ffe0400d13134255051e
2d091b261a4a094110fff4000c000c014000560009fff2000b000b014000
560009fff8000d000d0140b656092600290129b8ffeab40e0e025529b8ff
f4400b0c0c0255291a32210c0c0cb80140b456210e0b0bb80140b4562108
0d0db80140b656212612012612b8ffecb40e0e025512b8fff6b40d0d0255
12b8fff8400f0c0c02551254200001001931635b182b4e10f45d4de42b2b
2bed10ed2b2b2b4e10f62b2b5d4ded2b2b2bf4ed003fed2b3fed2b10fd5d
2be410fd5d2bf4111217391117391112393901121739593130005d712b2b
2b2b2b2b2b2b2b2b015d712b2b2b2b2b2b2b2b2b2b2b002b2b2b1bb7011b
012d1b162d05b80333b46c2d0b161eb80333b26c160300183f2b3f2b1139
12392f2f30315913371e0233323636353426272624272626353436363332
161617072626232206151417160417161615140606232224265cb70d5fc8
7d6faa53505c3bfe6c5169677ef294a3f98605ba0fada9b0a1393801d958
807a86fb9dc7fef39901d7106e8d5742734445672317612b37a3656fc164
69cc810e8b8e815b4f33336b283bb57675cf7374e9000000>OGDYIY+ArialMT AddT42Char 
1 15452 29 <000100090000054605ba000a0243b0852b58b3052c0b0bb80140b4560618
0b0bb80140b45604180b0b411f014000560008fffe000c000c0140005600
08fffa000c000c014000560000fff4000b000b014000560007fff2000b00
0b014000560008fff2000b000b0140b456030e0b0bb80140b456020e0b0b
410d014000560009ffea000d000d014000560008ffea000d000d0140b456
0a140d0dbe014000560000ffe6000d000d0140b45601240d0db80140b456
02240d0db80140b4560a1a0c0cbe014000560000ffe6000c000c0140b456
01240c0cb80140b45602240c0cb901400056b10202435458401205010008
02010200080a00050908050102052fddcd10ddcd113333003f3f3f111239
31301b40242f05012a002803250a2f0c300c600c89088909900cc00cf00c
0b200c500c0204020b0802b10602435458b709010c0b00080102003f3f01
111239391b40240a09092008051408080500010120020514020205090102
05e9200a000809650801650208b8ffc0400b2839500801800890080208b8
0101400d024028395f02018f029f020202b8010140112005500502300560
059005c005f0050505b80288b30b60a8182b1910f45d71e45d712be45d71
2b1810ed10ed003f3c1a19ed183f3c87052e2b7d10c4872e182b7d10c401
4bb00b534bb014515ab00243b040505a58b2000f0ab8fff1b2091201b8ff
f1b2081402b8ffee38383838383859014bb028534bb036515a58b90000ff
c03859593130015d715d005d59012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b002b2b2b1bb60500080802010200183f3f3f3330315921013301161736
370133010241fdc8d2017d2e1f222d018cc6fdc205bafbd7807078780429
fa46>OGDYIY+ArialMT AddT42Char 
2 0 30 <000100190000077605ba001802f7b0852b58bc000ffffe000c000c0140b4
5602020c0c410d01400056000efffa000c000c01400056000ffffd000c00
0c0140b45602030c0c410d01400056000efffa000b000b01400056000fff
f4000b000b0140b45604060b0bb80140b456030a0b0bb80140b456020e0b
0bb80140b456040c0c0cb80140b456030c0c0cb80140b456020c0c0c411f
01400056000efff4000d000d01400056000fffea000d000d01400056000f
fff4000c000c01400056000cffd4000b000d014000560005ffd4000b000d
014040335629002611291226183900361139123618490047114912471858
00571158125718109808980f02111818184255101818184255b106024354
58403310011a192b153405340c4405440c4b155405540c5b156405640c6b
157405740c7b150f05150c030001120800080f0208020102003f3f3f3f3f
111217395d01111239391b401e030405050206070808050a0b0c0c090d0e
0f0f0c14131212151617181815b8ff3cb305001820b8ff3cb30c121120b8
ff3c405a150809200005020220010014010100180508081e151814151518
120c09091e151214151512110c0f0f2010111410101112090c081815050f
11100c000205150c050318100f0f0909080802020102181212111100081a
17171a10410901510020000c015100150151004000050151b62020010101
1919b8018bb1a8182b4e10f45d1a194dfd1a18fdfd1a19fd184e456544e6
003f3c103c103c3f3c103c103c103c103c12173901123939111239391112
3939113939874d2e2b877dc4872e182b877dc4872e182b877dc4872e182b
877dc42b2b2b870e10c4c4870e103cc4870e10c4c4870e10c4c4870e10c4
c4870e10c4c4014bb00f534bb011515ab00243b040505a58b2120a18b8ff
f6383859014bb025534bb02a515ab00243b040505a58b90000ffc0385900
4bb00b534bb00e515ab00243b040505a58b30c40054038385959012b2b31
3001725d002b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b1b400d0c1208
0500080f02010215080200183f333f3f3f333f3330315921013313161736
370133131217363713330123012627060701019efe7bc7df241a380a0117
ead24f231c2de6c3fe6ebbfecb27071714fec905bafc3f9795eb2403defd
1afeecf38bb403aefa46045d8c206547fba30000>OGDYIY+ArialMT AddT42Char 
2 6264 40 <00020086ffe8041f05ba0010001d0212b0852b58407b01050c0f24053505
4505053f1fb01f021f1f221c331c421c701f901f063a133c163c1a4c164c
1a5d085d0d580f5d165e1a6a086c0d680f6e166e1ac01fd90cda17da19e2
13ec17ec19e31de01fff1f1920052f0f2f1430053f0f40054c0f50056605
da1df504fa100c10150e040602001b1c0607010a151c0e0b184110fff800
0d000d014000560018fff4000c000c014000560018fff2000b000b014040
22561824d00b01100b400b600b800b041f400d0d02550b0c0f0f02550b18
0d0d02550bb8fff6b40c0c02550bb8fff0b40b0b06550bb8fff4b40f0f06
550bb8ffe0b40c0c06550bb8fff4400b0d0d06550b740111020d0db80140
b45611080c0cb80140b656113300120b0bb80140b45600040d0db8014040
135600040c0c025500040d0d06550033030c0c0cb80140b45603080d0db8
014040195603250202c001019001a001b001f001041f013f014f010301b8
fffeb41010025501b8fffc401d0e0e0255010c0d0d025501100c0c025501
120b0b0255010c0b0b065501b8fff8b41010065501b8fffc40160f0f0655
01180c0c065501140d0d065501191e4737182b4e10f42b2b2b2b2b2b2b2b
2b2b5d71723c4d10fd2b2bf42b2b2b2be42b2b10fd2b2b2b2b2b2b2b2b5d
71ed2b2b2b003fed3f3fed3f11391112393130005d015d717200711bb401
0a100e15b8032fb56c0e0b04061bb8032fb46c0607020000183f3f2b393f
2b323f30315921231133113633321e021510002322270314171633323635
3426232206012da7b472b162af7140fef2bdbc6b0234559176aca57576ac
05bafdf58f4f8fca73feeffed69d0196bf558bcdcbd0c6cd>OGDYIY+ArialMT AddT42Char 
1 13572 26 <00020046ffe803df05ba0011001d0213b0852b58407c0a02040d250d340d
440d053514351c5702540a5214531c6702640565096314601cc01fd405d5
13dd19e513e514ef17eb19e51de01fff1f161f1f2b1a3c163c1a4b1a701f
901f072e02240d2e163a02350d4b02450d4614491c570a560d670de506e7
16fa01f40e100115030e0b100f001b1c0b0711000a151c030b18410afff8
000d000d014000560018fff8000c000c0140b45618330100bbfff2000b00
0b0140b4560025110f4110fff8000d000d01400056000ffff4000c000c01
400056000ffff2000b000b01404024560f251010d0110110114011601180
11041f400b0b02551f400d0d025511121010025511b8fff440110f0f0255
11060e0e025511180d0d025511b8fff2400b0b0b0655110e1010065511b8
ffeeb40c0c065511b8fff8b40d0d065511bbfff8000c000c0140b6561174
12080d0db80140b456120c0c0cb80140b456120e0b0bb80140b656122407
100c0cb80140b45607100d0db80140403b56bf07cf07df07ff07041f073f
074f0703071e0b0b025507180c0c0255071e0d0d0255070c0b0b0655070c
0d0d0655071a0c0c065507191e3450182b4e10f42b2b2b2b2b2b5d712b2b
4ded2b2b2bfd2b2b2b2b2b2b2b2b2b2b2b5d713c10ed2b2b2b10fd2b3ce4
2b2b003fed3f3c3fed3f3c11391112393130005d01715d00711bb10315b8
032f400a6c030b010e0e000a0b1bb8032fb46c0b070f0000183f3f2b3f33
12393f2b3031592135062322262635341236333216171133110114163332
36353426232206033865c47fd5756ad48360962fb3fd20ac7576a5a87b78
a1869e8cfba39f01038a5141020efa460212cccac1c6daccc4000000>OGDYIY+ArialMT AddT42Char 
2 10108 45 <000100130000028005d30017015eb0852b58401e1409010f192f19301940
1970199b0c9c0da90d081a0d280db019c0190419b8ffc0401f1a1f341d08
0d030c0f1c0a0115022b1413040306000a9f140114ff130e0b0bb80140b7
56134004170e0b0bb80140b45617080d0db80140b456170c0c0cb8014040
0b5617250400030292010100b8ffc0b331383400b8ffc0402b1c1f349000
0119400f0f025519400d0e025500141010025500280f0f025500220e0e02
55002c0d0d025500b8fff2400b0c0c025500140b0b065500b8ffeab41010
065500b8ffe6b40f0f065500b8fffab70c0c065500a31819bc01ba002100
f6010a00182b2bf62b2b2b2b2b2b2b2b2b2b2b5d2b2b3c10f43c103ced2b
2b2b10ed2bed5d003f3f3c3c3cfd3c3fed39113931304379401410110609
0706080602061009121b0011060f1b012b012b2a8181012b715d00721bb5
000a16130302b8032db46c03060a0fb80332b26c0a0100183f2b3f2b3332
3f303159331123353335343736363332170726232206151533152311b29f
9f131a83764c5c1b38325244cfcf039a8c716b344657129d0a4660628cfc
66000000>OGDYIY+ArialMT AddT42Char 
2 11976 49 <00020042fe5103ea043e001e002a0229b0852b5840600b0b05142c0b2514
4c0b451406091d191d2c0b26142c23390b36144a0b46145607580b680bfa
0af5150e2e232c273e233e274c27902ca02c07362136293f2c460b462145
2954215429690763216329602c802cda27e821ee23ef271117160615b802
b1b4281c130701b802aa401020003000600070008000c000d0000700b802
7d4010051c1c0f0a45221c0c0a16153325330a4110fff2000b000b014000
56000afff2000c000c01400056000afff8000d000d01404024560a251818
d017011017401760178017042c400b0c02552c400d0d0255171210100255
17b8fff440110f0f025517060e0e025517160d0d025517b8ffea400b0b0b
065517121010065517b8ffeeb40c0c065517b8fffcb40d0d065517410aff
fa000c000c014000560017fffa000d000d0140400c5617740f012500221f
0e0b0bb80140b4561f080d0db80140b4561f0c0c0cb801404017561f24bf
0fcf0fdf0fff0f041f0f3f0f4f0f030f0c0c0cb80140b4560f100d0db801
40402e560f200b0b02550f1a0c0c02550f220d0d02550f1c0b0b06550f0c
0d0d06550f1a0c0c06550f192b2c74213450182b2b4ef42b2b2b2b2b2b2b
2b5d714ded2b2b2bf4ed10fd2b2b2b2b2b2b2b2b2b2b2b2b5d713c10fd2b
2b2be4f63c003fede43fedfd5de43fede43f3c3130015d71005d711b400a
00000116030000131c05b8032fb56c1c0f0a0c22b8032fb76c0c0a160615
1328b8032fb26c130700183f2b323f3f2b393f2b12392f5f5e5d30315917
171617163332363736270623220235341236333217353311140606232226
13141633323635342623220666af0b3243747d88180e0176b0dbf06ed18d
bc7aa665dba0beea99a67d7ca8ad7a78a8581a512532645a37b08b013cdd
9801018c9880fc6af8cf78ab032ad1c0bfccc3c6c3000000>OGDYIY+ArialMT AddT42Char 
2 2620 33 <00010087000003e805ba001401c9b0852b58b90016ffc0b315173403b8ff
e0400e0d0d0655250435034503ba0d0403b8ffe040151719341708110c11
14030501000f1c0507140b0a0c4110fff8000d000d01400056000cfff200
0b000b01400056000cfff4000c000c01404027560c250940333634ff0901
c0090116400b0b025516401010025509281010025509140e0e025509b8ff
ec40110d0d025509040c0c0255091a0b0b025509b8fff6400b0b0b065509
141010065509b8fff8400b0d0d0655090a0f0f065509b8fff6b60c0c0655
094e16b8ffc04017343634b016f016027016a016b016ff1604160214080d
0db80140b456140c0c0cb80140b456140e0b0bb80140b45614250100b8ff
c04010333634f0000100002000d000e0000400b8fffab41010025500b8ff
fa40170e0e025500040c0c025500080b0b025500040b0b065500b8fffa40
160f0f065500020c0c065500020d0d0655004e154750182b10f62b2b2b2b
2b2b2b2b5d712b3cfd2b2b2b3c105d712bf42b2b2b2b2b2b2b2b2b2b2b2b
5d712bed2b2b2b003f3c3fed3f1139113901123931304379400e060e0725
0e060c1b010d080f1b01002b012b2b81002b5d2b012b1bb60b0a000a0305
0fb80330b46c0507010000183f3f2b393f3f303159331133113633321616
15112311342623220606151187b47ec076ae4bb4756b508d3c05bafdf292
5da49cfd5f02a1877b538e7dfdbb>OGDYIY+ArialMT AddT42Char 
2 860 31 <00010088000003f805ba000b0312b0852b58b3030e0b0b41130140005600
09fff2000b000b014000560008fff2000b000b014000560004fff2000b00
0b0140b456070c0c0cb80140b456060c0c0cb80140b456050c0c0cb80140
401c56060c0d0d0655070656065a09030f0df305f60603090c1010025506
b8fff4b40c0c02550ab8fff4b40c0c025509b8fff4b40c0c025503b8ffe8
40100d0d06555503770a0212062013213408b8fff0b312273409b8fff0b4
1227341205b8fff0b312213409b8fff04084122734060404050406370947
040525062d0a580a7703750ada03e30607a6060123062607250839063809
3f0d4f0d59045906580759097d0479059909c606d204d606e406e907f706
f90815120a0a05030304020606070909080a0a0509080825070614070706
03040425050a1405050a0a09060304080102000405060708080b0b000a04
b8010f400905040c0c0655052208b8010f401520073f070207100c0c0655
071a900d010d0b0e0b0bb80140b4560b080d0db80140b4560b0c0c0cb801
40b7560b2500020e0b0bb80140b45602080d0db80140b456020c0c0cb801
40400e56022501019000013f004f000200b8fffe40310e0e025500100d0d
025500100c0c0255000a0b0b025500120b0b065500120c0c065500080d0d
065500190c0de1214766182b2b4ef42b2b2b2b2b2b2b5d713c4d10ed2b2b
2b10ed2b2b2b4e1071f62b5d4dedf42bed003f3c103c103c3f3c3f3c1117
3987052e2b047d10c487052e182b0e7d10c40710083c083c0310083c083c
b10602435458400d4b09011f0984030209180d1134002b5d715931300143
5c58400a092c1d3909081d1d3c06b8ffdeb21d3906b8ffd4b2203906b8ff
d4b121392b2b2b2b2b595d00715d0171002b2b435c58b90006ffc0b22139
03b8ffc0b2163903b8ffdeb2103906b8ffdeb2103903b8ffdeb20c3903b8
ffdeb10b392b2b2b2b2b2b59012b2b2b435c584012dd0401081416390908
14143c090814143c06b8fff6b2183906b8ffecb11b392b2b2b2b2b015d59
005d2b2b2b2b2b015d712b2b2b2b2b2b002b2b1b400f0a03090604000408
0a000a0406010000183f3f3f3f1112173930315933113311013301012301
071188b401aae9fe6a01bfdefea17f05bafcbc01b0fe76fd64021f7afe5b
>OGDYIY+ArialMT AddT42Char 
2 10620 47 <0001008700000626043e0023036fb0852b5841920013fff2000b000b0140
00560010fff2000b000b014000560012fff2000b000b014000560011fff2
000b000b01400056001dfffc000d000d01400056001cfffc000d000d0140
0056001bfffc000d000d01400056001afffc000d000d01400056001dfffc
000c000c01400056001cfffc000c000c01400056001bfffc000c000c0140
0056001afffc000c000c01400056000cfffe000c000c01400056000dfffe
000c000c01400056000efffe000c000c01400056000ffffe000c000c0140
00560013fff2000c000c014000560010fff2000c000c014000560012fff2
000c000c014000560011fff2000c000c014000560013fff8000d000d0140
00560010fff8000d000d014000560012fff8000d000d014000560011fff8
000d000d01400056000dfff4b40d0d065508b8fff4b40d0d065509b8ffd8
404d0b0d342504e404e409e117e52005d505f620021708202309181b2009
0303231e1c06151c0b0b06070106231a19100ad025019025a02502251717
1a0e2590110111041010025511180f0f025511b8ffec400b0e0e02551114
0c0c025511b8ffe840170b0b025511020b0b0655110c1010065511060f0f
065511b8fffab40c0c065511b8fff8b40d0d065511b8015db318080c0cb8
0140b456180e0b0bb80140b45618040d0db80140400d561825901b011b18
0f0f02551bb8ffec400b0e0e02551b140c0c02551bb8ffee40110b0b0255
1b040b0b06551b0a101006551bb8fffe400b0d0d06551b0c0f0f06551bb8
fffcb40c0c06551bb8015db6000233230e0b0bb80140b45623080d0db801
40b456230c0c0cb80140401456232501d000019000a000021f003f004f00
0300b8fffe401d0e0e025500100d0d025500100c0c0255000c0b0b025500
160b0b065500b8fffcb41010065500b8fff440140f0f0655000a0c0c0655
000e0d0d065500192425b80178b3214750182b2b4ef42b2b2b2b2b2b2b2b
2b5d71723c4dfd2b2b2be410f42b2b2b2b2b2b2b2b2b5ded2b2b2bf42b2b
2b2b2b2b2b2b2b2b5dfd4e456544e67172003f3c3c3c3f3f3c4d10ed10ed
11173901111239123931304379400e0c141326140c111b01120d151b0100
2b012b2b81015d005d2b2b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b1b400a100a1a0a000a01060b15b80330b66c0b07090306
1eb80330b26c060700183f2b32323f2b3f3f3f3f30315933113315363633
321617363332161511231134262623220615112311342623220606151187
a132a66a76971f7eca9eaab3235c3e7094b458644c813a0426954e5f6258
baafb6fd27029d6c5f3a95a4fd9702b27878509a91fdd900>OGDYIY+ArialMT AddT42Char 
2 3260 35 <00020048fe6903e0043e0010001c01beb0852b58406c0b022b022a183b02
4b02790c063f153f194b19901ea01e053413341b3f1e4413441b5313531b
6313631b601e801ed406d512e606e90cea18102902220c2b153902350c49
02460c5a026902d90cdb18e316e919e61bfc020f01040d141a1c0b070e06
141c040b000e170e33004110fff2000b000b014000560000fff4000c000c
014000560000fff8000d000d014040245600251010d00f01100f400f600f
800f041e400b0c02551e400d0d02550f12101002550fb8fff440110f0f02
550f060e0e02550f160d0d02550fb8fffe400b0c0c02550f16101006550f
b8ffe8b40c0c06550fb8fff4400a0d0d06550f7411080d0db80140b45611
0c0c0cb80140b456110e0b0bb801404017561124bf07cf07df07ff07041f
073f074f0703070c0d0db80140b456070c0c0cb8014040285607240b0b02
55071a0c0c025507220d0d025507160c0c0655071a0d0d065507191d1e74
213450182b2b4ef42b2b2b2b2b2b2b5d714ded2b2b2bfd2b2b2b2b2b2b2b
2b2b2b5d713c10fd2b2b2bf43c003f3fed3f3fed113912393130005d015d
7100711bb4000e010414b8032fb76c040b0e060d0b1ab8032db26c0b0700
183f2b323f3f2b393f303159011106062322001134363633321735331101
1416333236353426232206032c2a9755bdfeef6fd37ec571a2fd21ac7873
a6af7675a3fe6902083b4e012e0107a0fe83a68efa4303adcdcdc3c7d4d6
c7000000>OGDYIY+ArialMT AddT42Char 
2 8156 43 <0001003fffe803b1043e0030041eb0852b58b3170e0b0bb80140b456180e
0b0bb80140b456190e0b0b4137014000560028fff4000c000c0140005600
27fff4000c000c014000560026fff4000c000c014000560025fff4000c00
0c014000560024fff4000c000c014000560023fff4000c000c0140005600
22fff4000c000c014000560021fff4000c000c014000560020fff4000c00
0c0140407c56042214223a094a094424562265227c098e098424a613ab2c
c2030d09171a1817304b2cd617051b025502021032010a185c085c095c0a
5c0b5c0c5c0d6a086a096a0a6a0b6a0c6a0db426b4270f27262427242936
245a0a590b64266428742374248024930a9c0c9228972c9530a40aa90ca3
27a428b326c5261628b8fff4b40d0d065522b8fff4b40d0d065523b8fff4
b40d0d065524b8fff4b40d0d065528b8fff4b40c0c065522b8fff4b40c0c
065523b8fff4b40c0c065524b8fff4b40c0c06551db8ffde40121e395a08
27250c0a041a202615040b2e1d1ab802aa4022192c0b0b02551f193f194f
195f19af19cf19060f191f196f19df19041f198f190219bd025500150000
02aa0001ffc040140b0b025510014001021001d00102000110010201b8ff
c0b314163401b8ffc040100e113401012e5c1d6c1d021d1c150704b8fff4
b40b0b025504b8ffe6b41010065504b8ffe640130f0f0655041c2e0b1f1a
011a24194013183432b8ffc040320f0f025519180f0f025519180d0d0255
19160c0c025519201010065519200f0f065519100c0c065519160d0d0655
19160c0c4109014000560019025b0007fff2000b000b0140b35607242ab8
ffc0b51c39d02a012ab8ffe6b40c0c02552ab8ffe8b40f0f02552ab8ffe8
b40c0c06552ab8ffeab40d0d06552abbfff4000c000c0140b3562a1a32b8
ffc04021272a346032c032023f3280320232100101012400180d0d025500
100d0d06550020b8fff4b40d0d025520b8fff4b41010065520b8fff4b70f
0f0655200e0b0bb8014040165620240f100b0b02550f160c0c02550f200d
0d02550fb8fffa40140f0f02550f0e0c0c06550f0c0d0d06550f060c0cb8
01404011560f22df00013f004f00020019313437182b4e10f45d714df42b
2b2b2b2b2b2bed2b2b2b2b102b2bed724e105d712bf62b2b2b2b2b712b4d
ed2bf42b2b2b2b2b2b2b2b2b2bed72003fed2b2b2b3fed7112392f2b2b5d
71722be410fd5d71722be41112391112390111121739313043794040272d
1e2305142c261110121013100306220d201b000928071b01052d071b011e
14201b00210e231b0022230d0c08290a1b012827090a062b041b001f101d
1b01002b2b103c103c2b103c103c2b012b2b2b2b2a2b818181002b2b2b2b
2b2b2b2b2b5d71015d72715d002b2b2b2b2b2b2b2b2b012b2b2b1b400a00
01011d0b26261d2e04b8032fb76c2e0b191a1a151db8032fb26c15070018
3f2b322f333f2b1139113311392f33303159133716163332363534272627
2e023534363736363332161617072626232206151417161716171e021514
06062322263fb20f897b7c78352593c6994f41382a91537dbd5a11b00c73
697c6a16162f1b84bf975669c67dcfd9013d1c6b7265443d231825324981
4e4779281f2b487b6718525c5237231c1d130a2433417c5c5a9f57ac0000
>OGDYIY+ArialMT AddT42Char 
1 14200 27 <00010024fff2022a05990017016eb0852b584120000cfffe000c000c0140
0056000bfffe000c000c014000560008fffe000c000c014000560007fffe
000c000c014000560006fffe000c000c01400056000affc0b323263409b8
ffc0402423263480190100010c0d0a0103001610092b0f0a06161c030b0f
10220022010d12080d0db80140b456120e0b0bb80140b456120a0c0cb801
4040225612250c01ff070845094560077007800790070400072007a007b0
07c007d0070607b8ffeeb41010025507b8fff4b40f0f025507b8fff2b40e
0e025507b8fff8b40d0d025507b8fff8b40c0c025507b8fffab410100655
07b8fff0400b0f0f065507060c0c065507b8ffe8b40d0d065507ba026a00
180136b166182b10f62b2b2b2b2b2b2b2b2b5d71f4e410ed3cfd2b2b2b3c
10e4f43c003fed3f3cfd3c1139123911333310c93130015d2b2b2b2b2b2b
2b1bb10316b80332b46c030b0100b8033240096c010a0d0d110e0a09b803
2db26c0a0600183f2b3332322f3f2b3f2b30315925170623222626351123
353311371133152311141616333202101a4c3c626c2c8484b3b5b5132b28
1ea19f103e65a202638c01076cfe8d8cfd934d2c1a000000>OGDYIY+ArialMT AddT42Char 
2 3804 36 <00010083ffe803e00426001801b7b0852b58b9001affc040091517340220
1316340fb8fff040191214342b1301240813160c0113160b06000a111c03
0b0033164110fff8000d000d014000560016fff2000b000b014000560016
fff4000c000c0140401c5616251817403336341a40101002551728101002
5517120e0e025517b8ffec400b0d0d025517040c0c025517b8fff4400b0b
0b065517141010065517b8fff8400b0d0d0655170c0f0f065517b8fff640
0d0c0c0655ff1701c01701174e1ab8ffc04016343634b01af01a02701aa0
1ab01aff1a041a0c080d0db80140b4560c0e0b0bb80140b4560c0c0c0cb8
0140b3560c2509b8ffc04010333634f0090100092009d009e0090409b8ff
f8b41010025509b8fff840110e0e025509040c0c0255090a0b0b065509b8
fff640160f0f065509020c0c065509020d0d0655094e194750182b10f62b
2b2b2b2b2b2b5d712bed2b2b2b105d712bf65d712b2b2b2b2b2b2b2b2b2b
2b3cfd2b2b2be4003fed3f3f3c39390111123931304379401a04100e0d0f
0d0206070806080508030610040c1b000d08111b00002b012b2a2a81005d
012b2b2b1bb4000a010311b80330b66c030b16060a0600183f3f3f2b323f
30315921350623222626272635113311141716163332363635113311033f
7cd55ea34f100bb40b116e51518e3bb49cb4486d4f35730292fdb38d3147
51538f880239fbda0000>OGDYIY+ArialMT AddT42Char 
1 14644 28 <00010021fe5103ee0426001a02c5b0852b58b30f180d0db80140b456140c
0d0db80140b456150c0d0db80140b456160c0d0db80140b4560f040d0dbe
014000560012fff4000d000d0140b4560e0c0d0db80140b4560d0c0d0db8
0140b4560c0c0d0db80140b4560f0c0c0cb80140b4560e0c0c0cb80140b4
560d0c0c0cb80140b4560c0c0c0cbe014000560012fff2000b000b0140b4
560c0e0b0bb901400056b10202435458401d0a140f030b031c190f12060b
061340120f200b400c200f180f0f02550f192f2b1add1a18cd1a1910dd1a
18cd003f3f3fed12173931301bb30f1c010fb8ffde40731c392814560faf
0a03400d400f020f202830341020283034070c0912160d1812270b270c27
0d360c360d350e99110b2812281348165912591359156912691369157906
760d79117a147a15850d8a118c128c138914980aa80bbc10bb11ba14ea0a
e714f50dfd10f914ff1c1e1213180e0e4255b106024354584016130b1c1b
040f440f840f030f190b031c190f12060b06003f3f3fed1112395d011112
39391b40370f0f0c101112120a00031914131325120a1412120a0f0c0f11
0c250b0a140b0b0a1312120c0c0b06031c190f001c101c022f1cbf1c021c
b8023fb50f1340124014b80254400b3f124012025f12bf120212b80142b6
0f012200451b0ab8025440120f200b4040200c300c4f0c03500cff0c020c
b80142b32f0f010fb8023fb41b207c66182b1a1910fd71f45d711a18ed1a
1910ed1810f4e41910e45d71ed1a1810ed1910e45d7100183fed3f3c103c
103c87052e2b087d10c487052e182b0e7d10c400111239870e103c3c08c4
4bb00e534bb018515ab00243b040505a58bb000cffe8000bffe801383859
592b313001435c58b90014ffdeb637390a2237390eb8ffe8b51539112215
392b2b2b2b595d712b2b00715d2b015d592b2b2b2b2b2b2b2b2b2b2b2b2b
2b002b1bb11903b80333400a6c190f0f0a0a12060b0600183f3f3f333f2b
303159132716333236373637363701331316173637133301060706062322
7f143b2c3c48171126050bfe6dc2dd2b221f2be3b4fe6c4124307c5634fe
67a91028241b6b0f1d0428fd9975817c76026bfbc8af425953000000>OGDYIY+ArialMT AddT42Char 
2 6888 41 <00010028000003d40426000e01eeb0852b58b301180c0cbe014000560008
ffe8000c000c0140400e5612b802c9080212013212173408b8ffce400912
1734013e1e213408b8ffc2404a1e2134290228092f103901390a49014602
460849094f105c01540254085a0950106c01630263086a097b0174087b09
8b0185088909f901f4021b1908260129082b093908a508d7010710b8ffc0
b7101534022c123909b8ffd44023123901023a090a02080a0a2501021401
0102010d0e08060261052b0706060a610d000db8fff440090b0b06550d2b
0e0a02b8010fb40808070506bb025b00000007fff440160b0b065507220d
a00e01000e400e600e800ef00e050eb8fff440240b0b06550e74000a7e01
01af00014f006f00ff000300180b0b065500190f1074217cc4182b2b4ef4
2b5d713c4d10ed10fd2b5d713ce42b10f43c103c10fd003fed2b3c10e53f
3cfde5113911123987052e2b877dc4100ec42b3130012b2b2b715d002b2b
2b2b435c58b5290126080201b8ffce4009121734083212173401b8ffc2b7
1e2134083e1e2134002b2b2b2b017159015d435c58b90008ffdeb20f3909
b8ffdeb20f3909b8ffe8b71b390908161b3d09b8fff0b2173909b8fff840
0a163902141639021a16392b2b2b2b2b2b2b2b59002b2b1bb30a01000cb8
0330b56c000a080605b8032fb26c060600183f2b333f2b32323031593335
010623213521150107363321152802a47358fe4f0364fdc16f796a01eb92
0308069277fd5e7b099b0000>OGDYIY+ArialMT AddT42Char 
OGDYIY+ArialMT /CharStrings get begin
/hyphen 46 def
/colon 34 def
/A 42 def
/C 38 def
/G 39 def
/H 48 def
/I 25 def
/M 32 def
/R 44 def
/S 37 def
/V 29 def
/W 30 def
/b 40 def
/d 26 def
/f 45 def
/g 49 def
/h 33 def
/k 31 def
/m 47 def
/q 35 def
/s 43 def
/t 27 def
/u 36 def
/y 28 def
/z 41 def
end
OGDYIY+ArialMT /Encoding get
dup 45 /hyphen put
dup 58 /colon put
dup 65 /A put
dup 67 /C put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 77 /M put
dup 82 /R put
dup 83 /S put
dup 86 /V put
dup 87 /W put
dup 98 /b put
dup 100 /d put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 107 /k put
dup 109 /m put
dup 113 /q put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 121 /y put
dup 122 /z put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/OGDYIY+ArialMT*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one 
/two /three /four /five /six /.notdef /eight /nine 
/colon 6{/.notdef}rp /A /.notdef /C 3{/.notdef}rp /G /H 
/I 3{/.notdef}rp /M 2{/.notdef}rp /P /.notdef /R /S 
/T /.notdef /V /W /.notdef /Y 7{/.notdef}rp /a 
/b /c /d /e /f /g /h /i 
/.notdef /k /l /m /n /o /p /q 
/r /s /t /u /v 2{/.notdef}rp /y /z 
133{/.notdef}rp]
OGDYIY+ArialMT nf
OGDYIY+ArialMT*1 [8.8 0 0 -8.8 0 0 ]msf
191.852 277.75 mo
(T2.Identity)
[5.36801 4.89279 2.43753 2.43755 4.89279 4.89281 4.89279 2.43753 1.95361 2.43753 0 ]xsh
191.852 295.031 mo
(T6.Violence)
[5.36801 4.89279 2.43753 5.86081 1.9536 4.89281 1.9536 4.89279 4.89281 4.39999 0 ]xsh
268.094 277.75 mo
(T16.Internet)
[5.36801 4.89279 4.89279 2.43753 2.43756 4.89279 2.43753 4.89279 2.93033 4.89282 4.89279 0 
]xsh
268.094 295.031 mo
(T32.Work)
[5.36801 4.89279 4.89279 2.43753 8.29834 4.89282 2.93033 0 ]xsh
345.082 277.75 mo
(T40.Method: qualitative)
[5.36801 4.89279 4.89279 2.43753 7.33035 4.89279 2.43753 4.89279 4.89282 4.89279 2.43753 2.43753 
4.89279 4.89282 4.89279 1.95358 1.95361 2.43753 4.89279 2.43756 1.95358 4.39999 0 ]xsh
345.082 295.031 mo
(T41.Social Capital)
[5.36801 4.89279 4.89279 2.43753 5.86081 4.89279 4.40002 1.95358 4.89279 1.95361 2.43753 6.35361 
4.89279 4.89279 1.95361 2.43753 4.89279 0 ]xsh
467.07 277.75 mo
(T44.Globalization)
[5.36801 4.89279 4.89279 2.43753 6.83755 1.95358 4.89282 4.89279 4.89279 1.95361 1.95361 4.39996 
4.89282 2.4375 1.95361 4.89282 0 ]xsh
467.07 295.031 mo
(T48.Adolescence)
[5.36801 4.89279 4.89279 2.43753 5.86081 4.89279 4.89282 1.95358 4.89279 4.40002 4.39996 4.89282 
4.89282 4.39996 0 ]xsh
566.559 277.75 mo
(T58.Race: African-Amer)
[5.36798 4.89282 4.89282 2.4375 6.35364 4.89276 4.40002 4.89276 2.43756 2.43756 5.86078 2.43756 
2.9303 1.95361 4.40002 4.89276 4.89282 2.9303 5.86084 7.33032 4.89282 0 ]xsh
566.559 295.031 mo
(T59.Health)
[5.36798 4.89282 4.89282 2.4375 6.35364 4.89276 4.89282 1.95361 2.4375 0 ]xsh
OGDYIY+ArialMT*1 [13.2 0 0 -13.2 0 0 ]msf
49.0977 9.44922 mo
(Trending)
[8.05201 4.3955 7.3392 7.3392 7.3392 2.9304 7.3392 0 ]xsh
0 306 mo
792 306 li
792 612 li
0 612 li
cp
0 0 0 0 cmyk
f
gsave
0 306 mo
792 306 li
792 612 li
0 612 li
cp
clp
1 lc
0 306 mo
792 306 li
792 612 li
0 612 li
cp
@
grestore
49.098 323.926 mo
777.828 323.926 li
777.828 529.926 li
49.098 529.926 li
cp
f
gsave
49.098 510 mo
777.828 510 li
777.828 512 li
49.098 512 li
cp
clp
.533489 lw
49.098 510.957 mo
777.828 510.957 li
.0627451 .0476081 .0476081 0 cmyk
@
grestore
gsave
49.098 443 mo
777.828 443 li
777.828 444 li
49.098 444 li
cp
clp
.533489 lw
49.098 443.41 mo
777.828 443.41 li
.0627451 .0476081 .0476081 0 cmyk
@
grestore
gsave
49.098 375 mo
777.828 375 li
777.828 377 li
49.098 377 li
cp
clp
.533489 lw
49.098 375.863 mo
777.828 375.863 li
.0627451 .0476081 .0476081 0 cmyk
@
grestore
gsave
176 323.93 mo
178 323.93 li
178 529.93 li
176 529.93 li
cp
clp
.533489 lw
176.859 529.926 mo
176.859 323.93 li
.0627451 .0476081 .0476081 0 cmyk
@
grestore
gsave
365 323.93 mo
367 323.93 li
367 529.93 li
365 529.93 li
cp
clp
.533489 lw
366.141 529.926 mo
366.141 323.93 li
.0627451 .0476081 .0476081 0 cmyk
@
grestore
gsave
555 323.93 mo
556 323.93 li
556 529.93 li
555 529.93 li
cp
clp
.533489 lw
555.422 529.926 mo
555.422 323.93 li
.0627451 .0476081 .0476081 0 cmyk
@
grestore
gsave
744 323.93 mo
745 323.93 li
745 529.93 li
744 529.93 li
cp
clp
.533489 lw
744.703 529.926 mo
744.703 323.93 li
.0627451 .0476081 .0476081 0 cmyk
@
grestore
gsave
49.098 476 mo
777.828 476 li
777.828 478 li
49.098 478 li
cp
clp
49.098 477.184 mo
777.828 477.184 li
.0627451 .0476081 .0476081 0 cmyk
@
grestore
gsave
49.098 409 mo
777.828 409 li
777.828 411 li
49.098 411 li
cp
clp
49.098 409.637 mo
777.828 409.637 li
.0627451 .0476081 .0476081 0 cmyk
@
grestore
gsave
49.098 341 mo
777.828 341 li
777.828 343 li
49.098 343 li
cp
clp
49.098 342.09 mo
777.828 342.09 li
.0627451 .0476081 .0476081 0 cmyk
@
grestore
gsave
81 323.93 mo
83 323.93 li
83 529.93 li
81 529.93 li
cp
clp
82.219 529.926 mo
82.219 323.93 li
.0627451 .0476081 .0476081 0 cmyk
@
grestore
gsave
270 323.93 mo
273 323.93 li
273 529.93 li
270 529.93 li
cp
clp
271.5 529.926 mo
271.5 323.93 li
.0627451 .0476081 .0476081 0 cmyk
@
grestore
gsave
460 323.93 mo
462 323.93 li
462 529.93 li
460 529.93 li
cp
clp
460.781 529.926 mo
460.781 323.93 li
.0627451 .0476081 .0476081 0 cmyk
@
grestore
gsave
649 323.93 mo
651 323.93 li
651 529.93 li
649 529.93 li
cp
clp
650.063 529.926 mo
650.063 323.93 li
.0627451 .0476081 .0476081 0 cmyk
@
grestore
82.219 406.941 mo
88.922 410.352 li
95.602 412.859 li
102.301 414.531 li
108.984 415.441 li
115.684 415.668 li
122.367 415.281 li
129.066 414.352 li
135.75 412.953 li
142.449 411.156 li
149.129 409.039 li
155.832 406.672 li
162.512 404.125 li
169.215 401.473 li
175.895 398.793 li
182.594 396.148 li
189.297 393.621 li
195.977 391.277 li
202.68 389.195 li
209.359 387.441 li
216.059 386.094 li
222.742 385.227 li
229.441 384.906 li
236.125 385.207 li
242.824 386.141 li
249.508 387.629 li
256.207 389.598 li
262.887 391.957 li
269.59 394.629 li
276.289 397.535 li
282.973 400.594 li
289.672 403.719 li
296.352 406.832 li
303.055 409.852 li
309.734 412.695 li
316.438 415.285 li
323.117 417.539 li
329.816 419.371 li
336.5 420.766 li
343.199 421.809 li
349.883 422.613 li
356.582 423.289 li
363.266 423.941 li
369.965 424.684 li
376.664 425.621 li
383.348 426.859 li
390.047 428.504 li
396.73 430.527 li
403.43 432.863 li
410.109 435.434 li
416.813 438.16 li
423.492 440.969 li
430.195 443.785 li
436.875 446.535 li
443.574 449.137 li
450.258 451.551 li
456.957 453.785 li
463.66 455.863 li
470.34 457.801 li
477.039 459.621 li
483.723 461.34 li
490.422 462.977 li
497.105 464.547 li
503.805 466.078 li
510.488 467.578 li
517.188 469.078 li
523.867 470.582 li
530.57 472.082 li
537.25 473.559 li
543.953 474.988 li
550.633 476.355 li
557.332 477.641 li
564.035 478.816 li
570.715 479.875 li
577.418 480.785 li
584.098 481.535 li
590.797 482.102 li
597.48 482.469 li
604.18 482.648 li
610.863 482.691 li
617.563 482.633 li
624.246 482.516 li
630.945 482.383 li
637.625 482.273 li
644.328 482.234 li
651.027 482.305 li
657.711 482.523 li
664.41 482.938 li
671.09 483.586 li
677.793 484.488 li
684.473 485.621 li
691.176 486.957 li
697.855 488.473 li
704.555 490.141 li
711.238 491.941 li
717.938 493.84 li
724.621 495.82 li
731.32 497.848 li
738.004 499.906 li
744.703 501.961 li
.273228 1 .618616 .191989 cmyk
@
82.219 453.938 mo
88.922 450.414 li
95.602 447.531 li
102.301 445.258 li
108.984 443.547 li
115.684 442.355 li
122.367 441.645 li
129.066 441.371 li
135.75 441.492 li
142.449 441.965 li
149.129 442.75 li
155.832 443.805 li
162.512 445.086 li
169.215 446.551 li
175.895 448.16 li
182.594 449.867 li
189.297 451.637 li
195.977 453.418 li
202.68 455.18 li
209.359 456.871 li
216.059 458.453 li
222.742 459.883 li
229.441 461.121 li
236.125 462.125 li
242.824 462.883 li
249.508 463.434 li
256.207 463.82 li
262.887 464.078 li
269.59 464.25 li
276.289 464.371 li
282.973 464.488 li
289.672 464.637 li
296.352 464.859 li
303.055 465.195 li
309.734 465.684 li
316.438 466.363 li
323.117 467.277 li
329.816 468.461 li
336.5 469.926 li
343.199 471.602 li
349.883 473.414 li
356.582 475.293 li
363.266 477.164 li
369.965 478.949 li
376.664 480.578 li
383.348 481.977 li
390.047 483.074 li
396.73 483.883 li
403.43 484.445 li
410.109 484.801 li
416.813 484.996 li
423.492 485.074 li
430.195 485.078 li
436.875 485.051 li
443.574 485.039 li
450.258 485.066 li
456.957 485.141 li
463.66 485.258 li
470.34 485.418 li
477.039 485.613 li
483.723 485.848 li
490.422 486.117 li
497.105 486.422 li
503.805 486.762 li
510.488 487.129 li
517.188 487.527 li
523.867 487.953 li
530.57 488.402 li
537.25 488.867 li
543.953 489.348 li
550.633 489.832 li
557.332 490.32 li
564.035 490.805 li
570.715 491.281 li
577.418 491.742 li
584.098 492.188 li
590.797 492.605 li
597.48 492.996 li
604.18 493.359 li
610.863 493.695 li
617.563 494.008 li
624.246 494.301 li
630.945 494.578 li
637.625 494.844 li
644.328 495.102 li
651.027 495.352 li
657.711 495.598 li
664.41 495.844 li
671.09 496.098 li
677.793 496.355 li
684.473 496.613 li
691.176 496.879 li
697.855 497.141 li
704.555 497.402 li
711.238 497.66 li
717.938 497.914 li
724.621 498.16 li
731.32 498.402 li
738.004 498.629 li
744.703 498.848 li
.108858 .909636 .654292 .0150454 cmyk
@
82.219 457.715 mo
88.922 457.191 li
95.602 456.852 li
102.301 456.68 li
108.984 456.668 li
115.684 456.809 li
122.367 457.09 li
129.066 457.504 li
135.75 458.043 li
142.449 458.695 li
149.129 459.453 li
155.832 460.309 li
162.512 461.25 li
169.215 462.273 li
175.895 463.363 li
182.594 464.516 li
189.297 465.715 li
195.977 466.957 li
202.68 468.234 li
209.359 469.535 li
216.059 470.848 li
222.742 472.168 li
229.441 473.48 li
236.125 474.785 li
242.824 476.066 li
249.508 477.324 li
256.207 478.547 li
262.887 479.734 li
269.59 480.879 li
276.289 481.973 li
282.973 483.016 li
289.672 483.996 li
296.352 484.914 li
303.055 485.762 li
309.734 486.531 li
316.438 487.219 li
323.117 487.82 li
329.816 488.332 li
336.5 488.75 li
343.199 489.109 li
349.883 489.434 li
356.582 489.754 li
363.266 490.094 li
369.965 490.484 li
376.664 490.953 li
383.348 491.527 li
390.047 492.23 li
396.73 493.047 li
403.43 493.941 li
410.109 494.867 li
416.813 495.797 li
423.492 496.684 li
430.195 497.492 li
436.875 498.184 li
443.574 498.723 li
450.258 499.086 li
456.957 499.293 li
463.66 499.367 li
470.34 499.328 li
477.039 499.195 li
483.723 498.996 li
490.422 498.746 li
497.105 498.469 li
503.805 498.188 li
510.488 497.926 li
517.188 497.699 li
523.867 497.527 li
530.57 497.41 li
537.25 497.344 li
543.953 497.324 li
550.633 497.34 li
557.332 497.391 li
564.035 497.465 li
570.715 497.563 li
577.418 497.672 li
584.098 497.793 li
590.797 497.918 li
597.48 498.043 li
604.18 498.164 li
610.863 498.289 li
617.563 498.418 li
624.246 498.559 li
630.945 498.711 li
637.625 498.887 li
644.328 499.078 li
651.027 499.297 li
657.711 499.547 li
664.41 499.828 li
671.09 500.148 li
677.793 500.5 li
684.473 500.867 li
691.176 501.23 li
697.855 501.566 li
704.555 501.859 li
711.238 502.09 li
717.938 502.234 li
724.621 502.281 li
731.32 502.203 li
738.004 501.98 li
744.703 501.602 li
.194034 .858488 0 0 cmyk
@
82.219 465.633 mo
88.922 465.965 li
95.602 466.25 li
102.301 466.492 li
108.984 466.695 li
115.684 466.859 li
122.367 466.992 li
129.066 467.094 li
135.75 467.168 li
142.449 467.223 li
149.129 467.254 li
155.832 467.273 li
162.512 467.277 li
169.215 467.273 li
175.895 467.262 li
182.594 467.25 li
189.297 467.242 li
195.977 467.234 li
202.68 467.238 li
209.359 467.254 li
216.059 467.281 li
222.742 467.332 li
229.441 467.402 li
236.125 467.496 li
242.824 467.621 li
249.508 467.766 li
256.207 467.934 li
262.887 468.117 li
269.59 468.316 li
276.289 468.527 li
282.973 468.75 li
289.672 468.977 li
296.352 469.207 li
303.055 469.438 li
309.734 469.664 li
316.438 469.887 li
323.117 470.102 li
329.816 470.301 li
336.5 470.496 li
343.199 470.691 li
349.883 470.91 li
356.582 471.164 li
363.266 471.469 li
369.965 471.84 li
376.664 472.293 li
383.348 472.844 li
390.047 473.504 li
396.73 474.266 li
403.43 475.113 li
410.109 476.027 li
416.813 476.992 li
423.492 477.992 li
430.195 479.004 li
436.875 480.012 li
443.574 481 li
450.258 481.957 li
456.957 482.883 li
463.66 483.789 li
470.34 484.672 li
477.039 485.543 li
483.723 486.406 li
490.422 487.262 li
497.105 488.117 li
503.805 488.98 li
510.488 489.848 li
517.188 490.73 li
523.867 491.633 li
530.57 492.535 li
537.25 493.426 li
543.953 494.289 li
550.633 495.105 li
557.332 495.863 li
564.035 496.547 li
570.715 497.137 li
577.418 497.617 li
584.098 497.977 li
590.797 498.191 li
597.48 498.258 li
604.18 498.172 li
610.863 497.961 li
617.563 497.648 li
624.246 497.254 li
630.945 496.801 li
637.625 496.313 li
644.328 495.809 li
651.027 495.313 li
657.711 494.848 li
664.41 494.438 li
671.09 494.102 li
677.793 493.848 li
684.473 493.664 li
691.176 493.535 li
697.855 493.441 li
704.555 493.375 li
711.238 493.309 li
717.938 493.238 li
724.621 493.137 li
731.32 492.996 li
738.004 492.801 li
744.703 492.531 li
0 .369329 .695216 0 cmyk
@
82.219 333.953 mo
88.922 333.293 li
95.602 333.469 li
102.301 334.422 li
108.984 336.078 li
115.684 338.371 li
122.367 341.238 li
129.066 344.609 li
135.75 348.418 li
142.449 352.598 li
149.129 357.082 li
155.832 361.805 li
162.512 366.699 li
169.215 371.691 li
175.895 376.727 li
182.594 381.727 li
189.297 386.633 li
195.977 391.371 li
202.68 395.883 li
209.359 400.094 li
216.059 403.941 li
222.742 407.359 li
229.441 410.277 li
236.125 412.629 li
242.824 414.414 li
249.508 415.707 li
256.207 416.598 li
262.887 417.168 li
269.59 417.504 li
276.289 417.691 li
282.973 417.816 li
289.672 417.965 li
296.352 418.219 li
303.055 418.668 li
309.734 419.395 li
316.438 420.484 li
323.117 422.023 li
329.816 424.098 li
336.5 426.727 li
343.199 429.781 li
349.883 433.129 li
356.582 436.629 li
363.266 440.145 li
369.965 443.535 li
376.664 446.664 li
383.348 449.387 li
390.047 451.586 li
396.73 453.254 li
403.43 454.461 li
410.109 455.273 li
416.813 455.75 li
423.492 455.961 li
430.195 455.969 li
436.875 455.844 li
443.574 455.645 li
450.258 455.426 li
456.957 455.211 li
463.66 455.023 li
470.34 454.887 li
477.039 454.816 li
483.723 454.84 li
490.422 454.977 li
497.105 455.25 li
503.805 455.676 li
510.488 456.285 li
517.188 457.094 li
523.867 458.113 li
530.57 459.301 li
537.25 460.598 li
543.953 461.949 li
550.633 463.289 li
557.332 464.566 li
564.035 465.723 li
570.715 466.695 li
577.418 467.426 li
584.098 467.859 li
590.797 467.934 li
597.48 467.598 li
604.18 466.895 li
610.863 465.922 li
617.563 464.785 li
624.246 463.586 li
630.945 462.43 li
637.625 461.422 li
644.328 460.668 li
651.027 460.266 li
657.711 460.32 li
664.41 460.941 li
671.09 462.223 li
677.793 464.156 li
684.473 466.535 li
691.176 469.133 li
697.855 471.734 li
704.555 474.109 li
711.238 476.039 li
717.938 477.297 li
724.621 477.664 li
731.32 476.918 li
738.004 474.832 li
744.703 471.188 li
1 .829374 .351232 .255924 cmyk
@
82.219 441.41 mo
88.922 442.25 li
95.602 443.008 li
102.301 443.699 li
108.984 444.332 li
115.684 444.906 li
122.367 445.438 li
129.066 445.93 li
135.75 446.391 li
142.449 446.828 li
149.129 447.246 li
155.832 447.66 li
162.512 448.074 li
169.215 448.492 li
175.895 448.93 li
182.594 449.387 li
189.297 449.871 li
195.977 450.395 li
202.68 450.965 li
209.359 451.586 li
216.059 452.27 li
222.742 453.02 li
229.441 453.844 li
236.125 454.75 li
242.824 455.738 li
249.508 456.785 li
256.207 457.871 li
262.887 458.977 li
269.59 460.082 li
276.289 461.168 li
282.973 462.215 li
289.672 463.195 li
296.352 464.098 li
303.055 464.898 li
309.734 465.574 li
316.438 466.113 li
323.117 466.484 li
329.816 466.676 li
336.5 466.691 li
343.199 466.586 li
349.883 466.426 li
356.582 466.27 li
363.266 466.184 li
369.965 466.234 li
376.664 466.48 li
383.348 466.988 li
390.047 467.813 li
396.73 468.938 li
403.43 470.297 li
410.109 471.844 li
416.813 473.512 li
423.492 475.25 li
430.195 476.996 li
436.875 478.695 li
443.574 480.289 li
450.258 481.742 li
456.957 483.051 li
463.66 484.223 li
470.34 485.266 li
477.039 486.18 li
483.723 486.977 li
490.422 487.656 li
497.105 488.23 li
503.805 488.695 li
510.488 489.066 li
517.188 489.34 li
523.867 489.527 li
530.57 489.641 li
537.25 489.695 li
543.953 489.699 li
550.633 489.676 li
557.332 489.629 li
564.035 489.582 li
570.715 489.543 li
577.418 489.527 li
584.098 489.547 li
590.797 489.621 li
597.48 489.762 li
604.18 489.969 li
610.863 490.246 li
617.563 490.59 li
624.246 490.996 li
630.945 491.469 li
637.625 492.004 li
644.328 492.598 li
651.027 493.254 li
657.711 493.965 li
664.41 494.734 li
671.09 495.555 li
677.793 496.426 li
684.473 497.324 li
691.176 498.234 li
697.855 499.145 li
704.555 500.027 li
711.238 500.871 li
717.938 501.656 li
724.621 502.363 li
731.32 502.98 li
738.004 503.484 li
744.703 503.863 li
.250797 .411353 1 .0362249 cmyk
@
82.219 431.805 mo
88.922 431.664 li
95.602 431.664 li
102.301 431.809 li
108.984 432.082 li
115.684 432.488 li
122.367 433.016 li
129.066 433.66 li
135.75 434.418 li
142.449 435.277 li
149.129 436.238 li
155.832 437.297 li
162.512 438.441 li
169.215 439.668 li
175.895 440.969 li
182.594 442.348 li
189.297 443.785 li
195.977 445.289 li
202.68 446.844 li
209.359 448.445 li
216.059 450.09 li
222.742 451.773 li
229.441 453.488 li
236.125 455.227 li
242.824 456.988 li
249.508 458.762 li
256.207 460.547 li
262.887 462.34 li
269.59 464.133 li
276.289 465.922 li
282.973 467.707 li
289.672 469.473 li
296.352 471.227 li
303.055 472.957 li
309.734 474.656 li
316.438 476.328 li
323.117 477.965 li
329.816 479.559 li
336.5 481.105 li
343.199 482.598 li
349.883 484.035 li
356.582 485.402 li
363.266 486.695 li
369.965 487.91 li
376.664 489.035 li
383.348 490.07 li
390.047 491 li
396.73 491.828 li
403.43 492.555 li
410.109 493.168 li
416.813 493.68 li
423.492 494.078 li
430.195 494.363 li
436.875 494.539 li
443.574 494.598 li
450.258 494.555 li
456.957 494.422 li
463.66 494.234 li
470.34 494.008 li
477.039 493.773 li
483.723 493.551 li
490.422 493.371 li
497.105 493.254 li
503.805 493.227 li
510.488 493.309 li
517.188 493.531 li
523.867 493.91 li
530.57 494.434 li
537.25 495.074 li
543.953 495.816 li
550.633 496.633 li
557.332 497.504 li
564.035 498.402 li
570.715 499.316 li
577.418 500.215 li
584.098 501.078 li
590.797 501.883 li
597.48 502.609 li
604.18 503.254 li
610.863 503.816 li
617.563 504.305 li
624.246 504.73 li
630.945 505.09 li
637.625 505.395 li
644.328 505.648 li
651.027 505.855 li
657.711 506.023 li
664.41 506.16 li
671.09 506.266 li
677.793 506.344 li
684.473 506.383 li
691.176 506.375 li
697.855 506.305 li
704.555 506.16 li
711.238 505.938 li
717.938 505.621 li
724.621 505.195 li
731.32 504.66 li
738.004 503.996 li
744.703 503.195 li
.33933 0 .45771 0 cmyk
@
82.219 507.492 mo
88.922 509.23 li
95.602 510.398 li
102.301 511.031 li
108.984 511.184 li
115.684 510.891 li
122.367 510.199 li
129.066 509.152 li
135.75 507.793 li
142.449 506.164 li
149.129 504.309 li
155.832 502.27 li
162.512 500.094 li
169.215 497.82 li
175.895 495.496 li
182.594 493.16 li
189.297 490.855 li
195.977 488.633 li
202.68 486.527 li
209.359 484.586 li
216.059 482.852 li
222.742 481.367 li
229.441 480.18 li
236.125 479.324 li
242.824 478.816 li
249.508 478.625 li
256.207 478.711 li
262.887 479.043 li
269.59 479.578 li
276.289 480.285 li
282.973 481.129 li
289.672 482.07 li
296.352 483.074 li
303.055 484.105 li
309.734 485.125 li
316.438 486.105 li
323.117 487 li
329.816 487.777 li
336.5 488.422 li
343.199 488.934 li
349.883 489.336 li
356.582 489.641 li
363.266 489.863 li
369.965 490.016 li
376.664 490.109 li
383.348 490.168 li
390.047 490.199 li
396.73 490.234 li
403.43 490.313 li
410.109 490.461 li
416.813 490.723 li
423.492 491.125 li
430.195 491.707 li
436.875 492.508 li
443.574 493.555 li
450.258 494.859 li
456.957 496.379 li
463.66 498.055 li
470.34 499.848 li
477.039 501.695 li
483.723 503.555 li
490.422 505.375 li
497.105 507.102 li
503.805 508.684 li
510.488 510.074 li
517.188 511.223 li
523.867 512.09 li
530.57 512.691 li
537.25 513.074 li
543.953 513.273 li
550.633 513.328 li
557.332 513.277 li
564.035 513.16 li
570.715 513.016 li
577.418 512.879 li
584.098 512.793 li
590.797 512.797 li
597.48 512.922 li
604.18 513.176 li
610.863 513.527 li
617.563 513.957 li
624.246 514.438 li
630.945 514.945 li
637.625 515.453 li
644.328 515.938 li
651.027 516.375 li
657.711 516.738 li
664.41 517.004 li
671.09 517.148 li
677.793 517.172 li
684.473 517.113 li
691.176 517.02 li
697.855 516.941 li
704.555 516.918 li
711.238 517 li
717.938 517.23 li
724.621 517.656 li
731.32 518.324 li
738.004 519.277 li
744.703 520.563 li
.589471 .00949111 .444343 0 cmyk
@
82.219 377.195 mo
88.922 378.07 li
95.602 379.176 li
102.301 380.492 li
108.984 381.996 li
115.684 383.668 li
122.367 385.488 li
129.066 387.438 li
135.75 389.492 li
142.449 391.633 li
149.129 393.836 li
155.832 396.09 li
162.512 398.363 li
169.215 400.645 li
175.895 402.906 li
182.594 405.129 li
189.297 407.297 li
195.977 409.383 li
202.68 411.371 li
209.359 413.242 li
216.059 414.969 li
222.742 416.539 li
229.441 417.922 li
236.125 419.105 li
242.824 420.09 li
249.508 420.891 li
256.207 421.547 li
262.887 422.078 li
269.59 422.52 li
276.289 422.891 li
282.973 423.223 li
289.672 423.547 li
296.352 423.891 li
303.055 424.273 li
309.734 424.734 li
316.438 425.293 li
323.117 425.977 li
329.816 426.82 li
336.5 427.824 li
343.199 428.961 li
349.883 430.188 li
356.582 431.465 li
363.266 432.758 li
369.965 434.023 li
376.664 435.227 li
383.348 436.324 li
390.047 437.285 li
396.73 438.094 li
403.43 438.746 li
410.109 439.242 li
416.813 439.582 li
423.492 439.762 li
430.195 439.781 li
436.875 439.637 li
443.574 439.324 li
450.258 438.859 li
456.957 438.266 li
463.66 437.57 li
470.34 436.805 li
477.039 436.004 li
483.723 435.188 li
490.422 434.391 li
497.105 433.645 li
503.805 432.973 li
510.488 432.41 li
517.188 431.988 li
523.867 431.723 li
530.57 431.598 li
537.25 431.594 li
543.953 431.684 li
550.633 431.84 li
557.332 432.035 li
564.035 432.246 li
570.715 432.445 li
577.418 432.605 li
584.098 432.707 li
590.797 432.719 li
597.48 432.617 li
604.18 432.406 li
610.863 432.105 li
617.563 431.734 li
624.246 431.316 li
630.945 430.871 li
637.625 430.418 li
644.328 429.98 li
651.027 429.578 li
657.711 429.23 li
664.41 428.961 li
671.09 428.785 li
677.793 428.719 li
684.473 428.738 li
691.176 428.832 li
697.855 428.98 li
704.555 429.172 li
711.238 429.383 li
717.938 429.602 li
724.621 429.805 li
731.32 429.984 li
738.004 430.117 li
744.703 430.191 li
.778347 .36994 .0740673 .000823987 cmyk
@
82.219 437.527 mo
88.922 439.27 li
95.602 440.941 li
102.301 442.555 li
108.984 444.102 li
115.684 445.59 li
122.367 447.008 li
129.066 448.367 li
135.75 449.66 li
142.449 450.891 li
149.129 452.055 li
155.832 453.156 li
162.512 454.195 li
169.215 455.168 li
175.895 456.078 li
182.594 456.926 li
189.297 457.707 li
195.977 458.422 li
202.68 459.074 li
209.359 459.664 li
216.059 460.188 li
222.742 460.648 li
229.441 461.043 li
236.125 461.375 li
242.824 461.648 li
249.508 461.875 li
256.207 462.066 li
262.887 462.238 li
269.59 462.406 li
276.289 462.578 li
282.973 462.77 li
289.672 462.996 li
296.352 463.27 li
303.055 463.602 li
309.734 464.004 li
316.438 464.496 li
323.117 465.086 li
329.816 465.789 li
336.5 466.602 li
343.199 467.488 li
349.883 468.414 li
356.582 469.332 li
363.266 470.211 li
369.965 471.008 li
376.664 471.684 li
383.348 472.199 li
390.047 472.52 li
396.73 472.664 li
403.43 472.672 li
410.109 472.586 li
416.813 472.441 li
423.492 472.285 li
430.195 472.152 li
436.875 472.094 li
443.574 472.141 li
450.258 472.32 li
456.957 472.609 li
463.66 472.988 li
470.34 473.43 li
477.039 473.914 li
483.723 474.418 li
490.422 474.918 li
497.105 475.387 li
503.805 475.809 li
510.488 476.156 li
517.188 476.406 li
523.867 476.543 li
530.57 476.574 li
537.25 476.523 li
543.953 476.41 li
550.633 476.254 li
557.332 476.07 li
564.035 475.879 li
570.715 475.703 li
577.418 475.563 li
584.098 475.473 li
590.797 475.457 li
597.48 475.531 li
604.18 475.703 li
610.863 475.969 li
617.563 476.324 li
624.246 476.77 li
630.945 477.301 li
637.625 477.91 li
644.328 478.602 li
651.027 479.367 li
657.711 480.207 li
664.41 481.113 li
671.09 482.09 li
677.793 483.105 li
684.473 484.105 li
691.176 485.031 li
697.855 485.816 li
704.555 486.406 li
711.238 486.734 li
717.938 486.742 li
724.621 486.367 li
731.32 485.551 li
738.004 484.234 li
744.703 482.352 li
.753658 .797055 .0132753 .000610361 cmyk
@
.273228 1 .618616 .191989 cmyk
OGDYIY+ArialMT*1 [11.0397 0 0 -11.0397 0 0 ]msf
755.156 510.297 mo
(T14)
[6.73419 6.13806 0 ]xsh
.108858 .909636 .654292 .0150454 cmyk
%ADOBeginSubsetFont: GAAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal OGDYIY+ArialMT gcheck setglobal} if
2 12660 50 <000100610000041605a7000d008bb0852b58400ec40d01040d0104020804
09030d00b802bb4030020104090c0d73030302402123344f025f026f0203
021a0f087309eb004f015f015f02033f015f016f017f010401190eb80192
b18b182b4e10f45d713c4df4ed4e10f6712b3c4d10ed003f3f3cfd3c3911
3901111239313001715d1bb4090c030100b80333b26c010400183f2b333f
30315913352115060003060723361212376103b58cfeed4b360fb90382f3
8904faad8c95fe12fefbb8dbad01ea01c79c0000>OGDYIY+ArialMT AddT42Char 
OGDYIY+ArialMT /CharStrings get begin
/seven 50 def
end
OGDYIY+ArialMT /Encoding get
dup 55 /seven put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/OGDYIY+ArialMT*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one 
/two /three /four /five /six /seven /eight /nine 
/colon 6{/.notdef}rp /A /.notdef /C 3{/.notdef}rp /G /H 
/I 3{/.notdef}rp /M 2{/.notdef}rp /P /.notdef /R /S 
/T /.notdef /V /W /.notdef /Y 7{/.notdef}rp /a 
/b /c /d /e /f /g /h /i 
/.notdef /k /l /m /n /o /p /q 
/r /s /t /u /v 2{/.notdef}rp /y /z 
133{/.notdef}rp]
OGDYIY+ArialMT nf
OGDYIY+ArialMT*1 [11.0397 0 0 -11.0397 0 0 ]msf
748.496 495.152 mo
(T17)
[6.73419 6.13806 0 ]xsh
1 lc
720.602 499.465 mo
744.703 501.602 li
.194034 .858488 0 0 cmyk
@
OGDYIY+ArialMT*1 [11.0397 0 0 -11.0397 0 0 ]msf
699.777 503.305 mo
(T22)
[6.73419 6.13806 0 ]xsh
0 .369329 .695216 0 cmyk
OGDYIY+ArialMT*1 [11.0397 0 0 -11.0397 0 0 ]msf
721.582 488.211 mo
(T23)
[6.73419 6.13806 0 ]xsh
1 .829374 .351232 .255924 cmyk
OGDYIY+ArialMT*1 [11.0397 0 0 -11.0397 0 0 ]msf
732.934 464.832 mo
(T25)
[6.73419 6.13806 0 ]xsh
.250797 .411353 1 .0362249 cmyk
OGDYIY+ArialMT*1 [11.0397 0 0 -11.0397 0 0 ]msf
728.066 515.406 mo
(T36)
[6.73419 6.13806 0 ]xsh
712.68 513.219 mo
744.703 503.195 li
.33933 0 .45771 0 cmyk
@
OGDYIY+ArialMT*1 [11.0397 0 0 -11.0397 0 0 ]msf
701.555 522.922 mo
(T38)
[6.73419 6.13806 0 ]xsh
.589471 .00949111 .444343 0 cmyk
OGDYIY+ArialMT*1 [11.0397 0 0 -11.0397 0 0 ]msf
754.547 526.277 mo
(T46)
[6.73419 6.13806 0 ]xsh
.778347 .36994 .0740673 .000823987 cmyk
OGDYIY+ArialMT*1 [11.0397 0 0 -11.0397 0 0 ]msf
748.387 434.164 mo
(T50)
[6.73419 6.13806 0 ]xsh
758.191 481.754 mo
744.703 482.352 li
.753658 .797055 .0132753 .000610361 cmyk
@
OGDYIY+ArialMT*1 [11.0397 0 0 -11.0397 0 0 ]msf
755.012 479.953 mo
(T60)
[6.73419 6.13806 0 ]xsh
.273228 1 .618616 .191989 cmyk
OGDYIY+ArialMT*1 [11.0397 0 0 -11.0397 0 0 ]msf
86.4961 410.891 mo
(T14)
[6.73421 6.13805 0 ]xsh
.108858 .909636 .654292 .0150454 cmyk
OGDYIY+ArialMT*1 [11.0397 0 0 -11.0397 0 0 ]msf
86.1484 452.828 mo
(T17)
[6.73421 6.13805 0 ]xsh
95.383 458.215 mo
82.219 457.715 li
.194034 .858488 0 0 cmyk
@
OGDYIY+ArialMT*1 [11.0397 0 0 -11.0397 0 0 ]msf
92.3086 467.918 mo
(T22)
[6.73421 6.13805 0 ]xsh
0 .369329 .695216 0 cmyk
OGDYIY+ArialMT*1 [11.0397 0 0 -11.0397 0 0 ]msf
64.3477 477.262 mo
(T23)
[6.73421 6.13805 0 ]xsh
1 .829374 .351232 .255924 cmyk
OGDYIY+ArialMT*1 [11.0397 0 0 -11.0397 0 0 ]msf
86.4961 337.91 mo
(T25)
[6.73421 6.13805 0 ]xsh
.250797 .411353 1 .0362249 cmyk
OGDYIY+ArialMT*1 [11.0397 0 0 -11.0397 0 0 ]msf
59.293 449.758 mo
(T36)
[6.73421 6.13805 0 ]xsh
.33933 0 .45771 0 cmyk
OGDYIY+ArialMT*1 [11.0397 0 0 -11.0397 0 0 ]msf
66.332 427.785 mo
(T38)
[6.73421 6.13805 0 ]xsh
.589471 .00949111 .444343 0 cmyk
OGDYIY+ArialMT*1 [11.0397 0 0 -11.0397 0 0 ]msf
86.5 511.426 mo
(T46)
[6.73421 6.13805 0 ]xsh
.778347 .36994 .0740673 .000823987 cmyk
OGDYIY+ArialMT*1 [11.0397 0 0 -11.0397 0 0 ]msf
86.4961 381.164 mo
(T50)
[6.73421 6.13805 0 ]xsh
.753658 .797055 .0132753 .000610361 cmyk
OGDYIY+ArialMT*1 [11.0397 0 0 -11.0397 0 0 ]msf
94.2227 437.699 mo
(T60)
[6.73421 6.13805 0 ]xsh
gsave
49.098 323.93 mo
777.828 323.93 li
777.828 529.93 li
49.098 529.93 li
cp
clp
49.098 323.926 mo
777.828 323.926 li
777.828 529.926 li
49.098 529.926 li
cp
.696254 .631098 .620691 .585718 cmyk
@
grestore
.653895 .581659 .568902 .37409 cmyk
OGDYIY+ArialMT*1 [8.8 0 0 -8.8 0 0 ]msf
27.0352 480.332 mo
(0.02)
[4.8928 2.43754 4.8928 0 ]xsh
27.0352 412.785 mo
(0.04)
[4.8928 2.43754 4.8928 0 ]xsh
27.0352 345.238 mo
(0.06)
[4.8928 2.43754 4.8928 0 ]xsh
0 lc
46.355 477.184 mo
49.098 477.184 li
.696254 .631098 .620691 .585718 cmyk
@
46.355 409.637 mo
49.098 409.637 li
@
46.355 342.09 mo
49.098 342.09 li
@
82.219 532.668 mo
82.219 529.926 li
@
271.5 532.668 mo
271.5 529.926 li
@
460.781 532.668 mo
460.781 529.926 li
@
650.063 532.668 mo
650.063 529.926 li
@
.653895 .581659 .568902 .37409 cmyk
OGDYIY+ArialMT*1 [8.8 0 0 -8.8 0 0 ]msf
72.4297 541.16 mo
(1980)
[4.8928 4.8928 4.89279 0 ]xsh
261.711 541.16 mo
(1990)
[4.89279 4.89279 4.89282 0 ]xsh
450.992 541.16 mo
(2000)
[4.89279 4.89279 4.89282 0 ]xsh
640.273 541.16 mo
(2010)
[4.89282 4.89276 4.89282 0 ]xsh
.750179 .679652 .670192 .901488 cmyk
OGDYIY+ArialMT*1 [11 0 0 -11 0 0 ]msf
401.844 553.273 mo
(Year)
[7.32599 6.11603 6.11597 0 ]xsh
OGDYIY+ArialMT*1 [0 -11 -11 0 0 0 ]msf
22.0469 469.422 mo
(Topic Prevalence)
[-6.71002 -6.11597 -6.11603 -2.44199 -5.5 -3.04691 -7.32602 -3.66293 -6.11597 -5.5 -6.11603 -2.44199 
-6.116 -6.116 -5.5 0 ]ysh
106.008 566.48 mo
720.91 566.48 li
720.91 612 li
106.008 612 li
cp
0 0 0 0 cmyk
f
116.969 571.961 mo
134.25 571.961 li
134.25 589.242 li
116.969 589.242 li
cp
f
118.695 580.602 mo
132.52 580.602 li
.273228 1 .618616 .191989 cmyk
@
116.969 589.238 mo
134.25 589.238 li
134.25 606.519 li
116.969 606.519 li
cp
0 0 0 0 cmyk
f
118.695 597.879 mo
132.52 597.879 li
.108858 .909636 .654292 .0150454 cmyk
@
253.957 571.961 mo
271.238 571.961 li
271.238 589.242 li
253.957 589.242 li
cp
0 0 0 0 cmyk
f
255.684 580.602 mo
269.508 580.602 li
.194034 .858488 0 0 cmyk
@
253.957 589.238 mo
271.238 589.238 li
271.238 606.519 li
253.957 606.519 li
cp
0 0 0 0 cmyk
f
255.684 597.879 mo
269.508 597.879 li
0 .369329 .695216 0 cmyk
@
363.195 571.961 mo
380.476 571.961 li
380.476 589.242 li
363.195 589.242 li
cp
0 0 0 0 cmyk
f
364.926 580.602 mo
378.75 580.602 li
1 .829374 .351232 .255924 cmyk
@
363.195 589.238 mo
380.476 589.238 li
380.476 606.519 li
363.195 606.519 li
cp
0 0 0 0 cmyk
f
364.926 597.879 mo
378.75 597.879 li
.250797 .411353 1 .0362249 cmyk
@
503.184 571.961 mo
520.465 571.961 li
520.465 589.242 li
503.184 589.242 li
cp
0 0 0 0 cmyk
f
504.914 580.602 mo
518.738 580.602 li
.33933 0 .45771 0 cmyk
@
503.184 589.238 mo
520.465 589.238 li
520.465 606.519 li
503.184 606.519 li
cp
0 0 0 0 cmyk
f
504.914 597.879 mo
518.738 597.879 li
.589471 .00949111 .444343 0 cmyk
@
602.676 571.961 mo
619.957 571.961 li
619.957 589.242 li
602.676 589.242 li
cp
0 0 0 0 cmyk
f
604.402 580.602 mo
618.227 580.602 li
.778347 .36994 .0740673 .000823987 cmyk
@
602.676 589.238 mo
619.957 589.238 li
619.957 606.519 li
602.676 606.519 li
cp
0 0 0 0 cmyk
f
604.402 597.879 mo
618.227 597.879 li
.753658 .797055 .0132753 .000610361 cmyk
@
.750179 .679652 .670192 .901488 cmyk
%ADOBeginSubsetFont: GAAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal OGDYIY+ArialMT gcheck setglobal} if
2 12860 51 <00010000ffe7023905d300030064b0852b58b90003ffdeb2143902b8ffde
4020143997030102039f03af0302037600011400000102010003000a03e8
0002e801b801a9b5000004b37a182b103c10f4ed10ed003f3c3f3c87052e
2b5d7d10c43130015d2b2b1bb30009010100183f3f3031591501330101a9
90fe581905ecfa14>OGDYIY+ArialMT AddT42Char 
2 13184 53 <0002009e0000055a05ba000f001d014eb0852b584012201f0143081c1d1e
02010211101e0f0008174110fffe000c000c014000560017fff2000b000b
014000560017fff6000c000d0140401f5617262009011f400d0d02550920
10100255090a0f0f025509180d0d025509b8fff4400c0c0c0655091a1f1d
100e0b0bb80140b456100a0d0db80140b456100c0c0cb80140400e561020
0120000100201010025500b8fff6b40f0f025500b8fff6b40d0d025500b8
fffab40c0c025500b8fff7b40c0c065500b8fff8400a0d0d0655005d1e3b
5c182b10f62b2b2b2b2b2b5d3cfd2b2b2b3c10f62b2b2b2b2b5ded2b2b2b
003f3cfd3c3f3cfd3c313043794036031b0708060805080408040619181a
1802060b0a0c0a0d0a030615161416131603061b03172101120e17210118
081c2101160a1121002b2b012b2b2a2a2a2a81015d1bb10010b80333b46c
0008011db80333b26c010200183f2b3f2b30315933112132171617161215
14020e022325213236373636353426272623219e01f9ab5a7e5974734e7a
91cd85feb1013991a531454d976c4eadfecc05ba151d4c62fecfc4a7fefe
a96132ad363145e9a6e6f72a1e000000>OGDYIY+ArialMT AddT42Char 
2 12988 52 <000100960000042a05ba000500a4b0852b58400c010204031e0500082004
0104b802a7b5070203020c0cb80140b456030e0b0bb80140b456030a0c0d
b80140400e5603200120000100201010025500b8fff6b40f0f025500b8ff
f6b40d0d025500b8fffab40c0c025500b8fff6b40c0c065500b8fff8400a
0d0d0655005d063b5c182b10f62b2b2b2b2b2b5d3cfd2b2b2b3c10e65d00
3f3cfd3c3f31301bb10003b80333b46c0008010200183f3f2b3031593311
3311211596c202d205bafaf3ad000000>OGDYIY+ArialMT AddT42Char 
OGDYIY+ArialMT /CharStrings get begin
/slash 51 def
/D 53 def
/L 52 def
end
OGDYIY+ArialMT /Encoding get
dup 47 /slash put
dup 68 /D put
dup 76 /L put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/OGDYIY+ArialMT*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /slash /zero /one 
/two /three /four /five /six /seven /eight /nine 
/colon 6{/.notdef}rp /A /.notdef /C /D 2{/.notdef}rp /G 
/H /I 2{/.notdef}rp /L /M 2{/.notdef}rp /P /.notdef 
/R /S /T /.notdef /V /W /.notdef /Y 
7{/.notdef}rp /a /b /c /d /e /f /g 
/h /i /.notdef /k /l /m /n /o 
/p /q /r /s /t /u /v 2{/.notdef}rp 
/y /z 133{/.notdef}rp]
OGDYIY+ArialMT nf
OGDYIY+ArialMT*1 [8.8 0 0 -8.8 0 0 ]msf
139.727 583.75 mo
(T14.Method: survey/scales)
[5.36801 4.89279 4.89279 2.43755 7.33034 4.89279 2.43753 4.89281 4.89279 4.89281 2.43753 2.43753 
4.40001 4.89279 2.93034 4.39999 4.89279 4.40001 2.43755 4.39999 4.39999 4.89279 1.95361 4.89279 
0 ]xsh
139.727 601.031 mo
(T17.Labor)
[5.36801 4.89279 4.89279 2.43755 4.89279 4.89281 4.89279 4.89279 0 ]xsh
276.719 583.75 mo
(T22.Social Services)
[5.36801 4.89279 4.89279 2.43753 5.86081 4.89279 4.40002 1.95358 4.89279 1.95361 2.43753 5.86081 
4.89279 2.93033 4.40002 1.95358 4.39999 4.89282 0 ]xsh
276.719 601.031 mo
(T23.Status/groups)
[5.36801 4.89279 4.89279 2.43753 5.86081 2.43753 4.89282 2.43753 4.89279 4.39999 2.43753 4.89282 
2.93033 4.89279 4.89279 4.89279 0 ]xsh
385.957 583.75 mo
(T25.Theory)
[5.36801 4.89279 4.89279 2.43753 5.36801 4.89279 4.89282 4.89279 2.93033 0 ]xsh
385.957 601.031 mo
(T36.Method: survey/opinion)
[5.36801 4.89279 4.89279 2.43753 7.33035 4.89279 2.43753 4.89279 4.89282 4.89279 2.43753 2.43753 
4.39999 4.89282 2.93033 4.39999 4.89279 4.39999 2.43756 4.89279 4.89279 1.95361 4.89279 1.95358 
4.89282 0 ]xsh
525.945 583.75 mo
(T38.Demography)
[5.36798 4.89282 4.89282 2.4375 6.35364 4.89276 7.33032 4.89282 4.89282 2.9303 4.89282 4.89276 
4.89282 0 ]xsh
525.945 601.031 mo
(T46.Stress)
[5.36798 4.89282 4.89282 2.4375 5.86084 2.4375 2.93036 4.89276 4.40002 0 ]xsh
625.434 583.75 mo
(T50.Method: Modeling)
[5.36798 4.89282 4.89282 2.4375 7.33032 4.89282 2.43756 4.89276 4.89282 4.89276 2.43756 2.43756 
7.33032 4.89276 4.89282 4.89282 1.95355 1.95361 4.89282 0 ]xsh
625.434 601.031 mo
(T60.Historical soc)
[5.36798 4.89282 4.89282 2.4375 6.35364 1.95355 4.40002 2.43756 4.89276 2.93036 1.95361 4.39996 
4.89282 1.95361 2.4375 4.40002 4.89276 0 ]xsh
OGDYIY+ArialMT*1 [13.2 0 0 -13.2 0 0 ]msf
49.0977 315.449 mo
(Declining)
[9.5304 7.3392 6.6 2.9304 2.9304 7.3392 2.9304 7.3392 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/OGDYIY+ArialMT*1 uf
/OGDYIY+ArialMT uf
/GAAAAA+ArialMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
